/*
 * mt9m114_regs.h
 *
 * Register definitions for the S5K5CA Sensor.
 *
 * Leverage mt9m114_regs.h
 *
 * Copyright (C) 2008 Hewlett Packard.
 *
 * This file is licensed under the terms of the GNU General Public License
 * version 2. This program is licensed "as is" without any warranty of any
 * kind, whether express or implied.
 */

#ifndef MT9M114_REGS_H
#define MT9M114_REGS_H

#include <media/yuv_sensor_cl2n.h>

#define REG_U8 	8
#define REG_U16 16
#define REG_U32 32
#define poll_delay 10
#define poll_timeout 100
#define COMMAND_REGISTER 0x0080
#define POLL_COMMAND_REGISTER 0xFFFF
#define HOST_COMMAND_0 (1 << 0)
#define HOST_COMMAND_1 (1 << 1)
#define HOST_COMMAND_2 (1 << 2)
#define HOST_COMMAND_3 (1 << 3)


struct sensor_reg {
	u16 addr;
	u32 val;
	u16 type;
};


static struct sensor_reg initial_list[] = {
//0507 modify for SHZBG , temp test only , not fine tune for new lens largan 30013A1
//0424   Version V2.0
//[Demo Initialization_GOX]
//Load Steps in this order to ensure correct SOC bring-up

//*Step1-Post-Reset 			//Post-Reset Settings
//POLL  COMMAND_REGISTER::HOST_COMMAND_1 =>  0x00
//Check 0x0080[1]=0
{POLL_COMMAND_REGISTER, HOST_COMMAND_1, 0},
// LOAD=Errata item 2
{0x301A, 0x0230, REG_U16}, 	// RESET_REGISTER

//*Step2-PLL_Timing_Full resolution			//PLL and Timing
//[MT9M114_1280x960_MIPI_768_fixed_30fps_EXTCLK_24]
{0x098E, 0x1000, REG_U16},
{0xC97E, 0x01,	 REG_U8},		//cam_sysctl_pll_enable = 1
{0xC980, 0x0120, REG_U16},		//cam_sysctl_pll_divider_m_n = 288
{0xC982, 0x0700, REG_U16},		//cam_sysctl_pll_divider_p = 1792
{0xC984, 0x8001, REG_U16},		//cam_port_output_control = 32769
{0xC988, 0x0F00, REG_U16},		//cam_port_mipi_timing_t_hs_zero = 3840
{0xC98A, 0x0B07, REG_U16},		//cam_port_mipi_timing_t_hs_exit_hs_trail = 2823
{0xC98C, 0x0D01, REG_U16},		//cam_port_mipi_timing_t_clk_post_clk_pre = 3329
{0xC98E, 0x071D, REG_U16},		//cam_port_mipi_timing_t_clk_trail_clk_zero = 1821
{0xC990, 0x0006, REG_U16},		//cam_port_mipi_timing_t_lpx = 6
{0xC992, 0x0A0C, REG_U16},		//cam_port_mipi_timing_init_timing = 2572
{0xC800, 0x0004, REG_U16},		//cam_sensor_cfg_y_addr_start = 4
{0xC802, 0x0004, REG_U16},		//cam_sensor_cfg_x_addr_start = 4
{0xC804, 0x03CB, REG_U16},		//cam_sensor_cfg_y_addr_end = 971
{0xC806, 0x050B, REG_U16},		//cam_sensor_cfg_x_addr_end = 1291
{0xC808, 0x02DC6C00, REG_U32},		//cam_sensor_cfg_pixclk = 48000000
{0xC80C, 0x0001, REG_U16},		//cam_sensor_cfg_row_speed = 1
{0xC80E, 0x00DB, REG_U16},		//cam_sensor_cfg_fine_integ_time_min = 219
{0xC810, 0x05B3, REG_U16},		//cam_sensor_cfg_fine_integ_time_max = 1459
{0xC812, 0x03EE, REG_U16},		//cam_sensor_cfg_frame_length_lines = 1006
{0xC814, 0x0636, REG_U16},		//cam_sensor_cfg_line_length_pck = 1590
{0xC816, 0x0060, REG_U16},		//cam_sensor_cfg_fine_correction = 96
{0xC818, 0x03C3, REG_U16},		//cam_sensor_cfg_cpipe_last_row = 963
{0xC826, 0x0020, REG_U16},		//cam_sensor_cfg_reg_0_data = 32
{0xC834, 0x0003, REG_U16},		//cam_sensor_control_read_mode = 0
{0xC854, 0x0000, REG_U16},		//cam_crop_window_xoffset = 0
{0xC856, 0x0000, REG_U16},		//cam_crop_window_yoffset = 0
{0xC858, 0x0500, REG_U16},		//cam_crop_window_width = 1280
{0xC85A, 0x03C0, REG_U16},		//cam_crop_window_height = 960
{0xC85C, 0x03,	 REG_U8},		//cam_crop_cropmode = 3
{0xC868, 0x0500, REG_U16},		//cam_output_width = 1280
{0xC86A, 0x03C0, REG_U16},		//cam_output_height = 960
{0xC878, 0x00,	 REG_U8},		//cam_aet_aemode = 0
{0xC88C, 0x1E02, REG_U16},		//cam_aet_max_frame_rate = 7682
{0xC88E, 0x1E02, REG_U16},		//cam_aet_min_frame_rate = 7682
{0xC914, 0x0000, REG_U16},		//cam_stat_awb_clip_window_xstart = 0
{0xC916, 0x0000, REG_U16},		//cam_stat_awb_clip_window_ystart = 0
{0xC918, 0x04FF, REG_U16},		//cam_stat_awb_clip_window_xend = 1279
{0xC91A, 0x03BF, REG_U16},		//cam_stat_awb_clip_window_yend = 959
{0xC91C, 0x0000, REG_U16},		//cam_stat_ae_initial_window_xstart = 0
{0xC91E, 0x0000, REG_U16},		//cam_stat_ae_initial_window_ystart = 0
{0xC920, 0x00FF, REG_U16},		//cam_stat_ae_initial_window_xend = 255
{0xC922, 0x00BF, REG_U16},		//cam_stat_ae_initial_window_yend = 1

//*Step3-Recommended		//Patch,Errata and Sensor optimization Setting
// Sensor optimization
{0x316A, 0x8270, REG_U16}, 	// DAC_TXLO_ROW
{0x316C, 0x8270, REG_U16}, 	// DAC_TXLO
{0x3ED0, 0x2305, REG_U16}, 	// DAC_LD_4_5
{0x3ED2, 0x77CF, REG_U16}, 	// DAC_LD_6_7
{0x316E, 0x8202, REG_U16}, 	// DAC_ECL
{0x3180, 0x87FF, REG_U16}, 	// DELTA_DK_CONTROL
{0x30D4, 0x6080, REG_U16}, 	// COLUMN_CORRECTION
{0x098E, 0x2802, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS [AE_TRACK_MODE]
{0xA802, 0x0008, REG_U16}, 	// AE_TRACK_MODE
 // Errata item 1
{0x3E14, 0xFF39, REG_U16}, 	// SAMP_COL_PUP2
// Errata item 3
// LOAD=Patch 0302; Feature Recommended; Adaptive Sensitivity
{0x0982, 0x0001, REG_U16}, 	// ACCESS_CTL_STAT
{0x098A, 0x5000, REG_U16}, 	// PHYSICAL_ADDRESS_ACCESS
{0xD000, 0x70CF, REG_U16},
{0xD002, 0xFFFF, REG_U16},
{0xD004, 0xC5D4, REG_U16},
{0xD006, 0x903A, REG_U16},
{0xD008, 0x2144, REG_U16},
{0xD00A, 0x0C00, REG_U16},
{0xD00C, 0x2186, REG_U16},
{0xD00E, 0x0FF3, REG_U16},
{0xD010, 0xB844, REG_U16},
{0xD012, 0xB948, REG_U16},
{0xD014, 0xE082, REG_U16},
{0xD016, 0x20CC, REG_U16},
{0xD018, 0x80E2, REG_U16},
{0xD01A, 0x21CC, REG_U16},
{0xD01C, 0x80A2, REG_U16},
{0xD01E, 0x21CC, REG_U16},
{0xD020, 0x80E2, REG_U16},
{0xD022, 0xF404, REG_U16},
{0xD024, 0xD801, REG_U16},
{0xD026, 0xF003, REG_U16},
{0xD028, 0xD800, REG_U16},
{0xD02A, 0x7EE0, REG_U16},
{0xD02C, 0xC0F1, REG_U16},
{0xD02E, 0x08BA, REG_U16},
{0xD030, 0x0600, REG_U16},
{0xD032, 0xC1A1, REG_U16},
{0xD034, 0x76CF, REG_U16},
{0xD036, 0xFFFF, REG_U16},
{0xD038, 0xC130, REG_U16},
{0xD03A, 0x6E04, REG_U16},
{0xD03C, 0xC040, REG_U16},
{0xD03E, 0x71CF, REG_U16},
{0xD040, 0xFFFF, REG_U16},
{0xD042, 0xC790, REG_U16},
{0xD044, 0x8103, REG_U16},
{0xD046, 0x77CF, REG_U16},
{0xD048, 0xFFFF, REG_U16},
{0xD04A, 0xC7C0, REG_U16},
{0xD04C, 0xE001, REG_U16},
{0xD04E, 0xA103, REG_U16},
{0xD050, 0xD800, REG_U16},
{0xD052, 0x0C6A, REG_U16},
{0xD054, 0x04E0, REG_U16},
{0xD056, 0xB89E, REG_U16},
{0xD058, 0x7508, REG_U16},
{0xD05A, 0x8E1C, REG_U16},
{0xD05C, 0x0809, REG_U16},
{0xD05E, 0x0191, REG_U16},
{0xD060, 0xD801, REG_U16},
{0xD062, 0xAE1D, REG_U16},
{0xD064, 0xE580, REG_U16},
{0xD066, 0x20CA, REG_U16},
{0xD068, 0x0022, REG_U16},
{0xD06A, 0x20CF, REG_U16},
{0xD06C, 0x0522, REG_U16},
{0xD06E, 0x0C5C, REG_U16},
{0xD070, 0x04E2, REG_U16},
{0xD072, 0x21CA, REG_U16},
{0xD074, 0x0062, REG_U16},
{0xD076, 0xE580, REG_U16},
{0xD078, 0xD901, REG_U16},
{0xD07A, 0x79C0, REG_U16},
{0xD07C, 0xD800, REG_U16},
{0xD07E, 0x0BE6, REG_U16},
{0xD080, 0x04E0, REG_U16},
{0xD082, 0xB89E, REG_U16},
{0xD084, 0x70CF, REG_U16},
{0xD086, 0xFFFF, REG_U16},
{0xD088, 0xC8D4, REG_U16},
{0xD08A, 0x9002, REG_U16},
{0xD08C, 0x0857, REG_U16},
{0xD08E, 0x025E, REG_U16},
{0xD090, 0xFFDC, REG_U16},
{0xD092, 0xE080, REG_U16},
{0xD094, 0x25CC, REG_U16},
{0xD096, 0x9022, REG_U16},
{0xD098, 0xF225, REG_U16},
{0xD09A, 0x1700, REG_U16},
{0xD09C, 0x108A, REG_U16},
{0xD09E, 0x73CF, REG_U16},
{0xD0A0, 0xFF00, REG_U16},
{0xD0A2, 0x3174, REG_U16},
{0xD0A4, 0x9307, REG_U16},
{0xD0A6, 0x2A04, REG_U16},
{0xD0A8, 0x103E, REG_U16},
{0xD0AA, 0x9328, REG_U16},
{0xD0AC, 0x2942, REG_U16},
{0xD0AE, 0x7140, REG_U16},
{0xD0B0, 0x2A04, REG_U16},
{0xD0B2, 0x107E, REG_U16},
{0xD0B4, 0x9349, REG_U16},
{0xD0B6, 0x2942, REG_U16},
{0xD0B8, 0x7141, REG_U16},
{0xD0BA, 0x2A04, REG_U16},
{0xD0BC, 0x10BE, REG_U16},
{0xD0BE, 0x934A, REG_U16},
{0xD0C0, 0x2942, REG_U16},
{0xD0C2, 0x714B, REG_U16},
{0xD0C4, 0x2A04, REG_U16},
{0xD0C6, 0x10BE, REG_U16},
{0xD0C8, 0x130C, REG_U16},
{0xD0CA, 0x010A, REG_U16},
{0xD0CC, 0x2942, REG_U16},
{0xD0CE, 0x7142, REG_U16},
{0xD0D0, 0x2250, REG_U16},
{0xD0D2, 0x13CA, REG_U16},
{0xD0D4, 0x1B0C, REG_U16},
{0xD0D6, 0x0284, REG_U16},
{0xD0D8, 0xB307, REG_U16},
{0xD0DA, 0xB328, REG_U16},
{0xD0DC, 0x1B12, REG_U16},
{0xD0DE, 0x02C4, REG_U16},
{0xD0E0, 0xB34A, REG_U16},
{0xD0E2, 0xED88, REG_U16},
{0xD0E4, 0x71CF, REG_U16},
{0xD0E6, 0xFF00, REG_U16},
{0xD0E8, 0x3174, REG_U16},
{0xD0EA, 0x9106, REG_U16},
{0xD0EC, 0xB88F, REG_U16},
{0xD0EE, 0xB106, REG_U16},
{0xD0F0, 0x210A, REG_U16},
{0xD0F2, 0x8340, REG_U16},
{0xD0F4, 0xC000, REG_U16},
{0xD0F6, 0x21CA, REG_U16},
{0xD0F8, 0x0062, REG_U16},
{0xD0FA, 0x20F0, REG_U16},
{0xD0FC, 0x0040, REG_U16},
{0xD0FE, 0x0B02, REG_U16},
{0xD100, 0x0320, REG_U16},
{0xD102, 0xD901, REG_U16},
{0xD104, 0x07F1, REG_U16},
{0xD106, 0x05E0, REG_U16},
{0xD108, 0xC0A1, REG_U16},
{0xD10A, 0x78E0, REG_U16},
{0xD10C, 0xC0F1, REG_U16},
{0xD10E, 0x71CF, REG_U16},
{0xD110, 0xFFFF, REG_U16},
{0xD112, 0xC7C0, REG_U16},
{0xD114, 0xD840, REG_U16},
{0xD116, 0xA900, REG_U16},
{0xD118, 0x71CF, REG_U16},
{0xD11A, 0xFFFF, REG_U16},
{0xD11C, 0xD02C, REG_U16},
{0xD11E, 0xD81E, REG_U16},
{0xD120, 0x0A5A, REG_U16},
{0xD122, 0x04E0, REG_U16},
{0xD124, 0xDA00, REG_U16},
{0xD126, 0xD800, REG_U16},
{0xD128, 0xC0D1, REG_U16},
{0xD12A, 0x7EE0, REG_U16},
{0x098E, 0x0000, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS
{0xE000, 0x010C, REG_U16}, 	// PATCHLDR_LOADER_ADDRESS
{0xE002, 0x0202, REG_U16}, 	// PATCHLDR_PATCH_ID
{0xE004, 0x41030202, REG_U32}, 	// PATCHLDR_FIRMWARE_ID
{0x0080, 0xFFF4, REG_U16}, 	// COMMAND_REGISTER
//  POLL  COMMAND_REGISTER::HOST_COMMAND_0 =>  0x00
//Check 0x0080[0]=0
{POLL_COMMAND_REGISTER, HOST_COMMAND_0, 0},
{0x0080, 0xFFF5, REG_U16}, 	// COMMAND_REGISTER
//  POLL  COMMAND_REGISTER::HOST_COMMAND_0 =>  0x00
//Check 0x0080[0]=0
{POLL_COMMAND_REGISTER, HOST_COMMAND_0, 0},

{0x0982, 0x0001, REG_U16}, 	// ACCESS_CTL_STAT
{0x098A, 0x512C, REG_U16}, 	// PHYSICAL_ADDRESS_ACCESS
{0xD12C, 0x70CF, REG_U16},
{0xD12E, 0xFFFF, REG_U16},
{0xD130, 0xC5D4, REG_U16},
{0xD132, 0x903A, REG_U16},
{0xD134, 0x2144, REG_U16},
{0xD136, 0x0C00, REG_U16},
{0xD138, 0x2186, REG_U16},
{0xD13A, 0x0FF3, REG_U16},
{0xD13C, 0xB844, REG_U16},
{0xD13E, 0x262F, REG_U16},
{0xD140, 0xF008, REG_U16},
{0xD142, 0xB948, REG_U16},
{0xD144, 0x21CC, REG_U16},
{0xD146, 0x8021, REG_U16},
{0xD148, 0xD801, REG_U16},
{0xD14A, 0xF203, REG_U16},
{0xD14C, 0xD800, REG_U16},
{0xD14E, 0x7EE0, REG_U16},
{0xD150, 0xC0F1, REG_U16},
{0xD152, 0x71CF, REG_U16},
{0xD154, 0xFFFF, REG_U16},
{0xD156, 0xC610, REG_U16},
{0xD158, 0x910E, REG_U16},
{0xD15A, 0x208C, REG_U16},
{0xD15C, 0x8014, REG_U16},
{0xD15E, 0xF418, REG_U16},
{0xD160, 0x910F, REG_U16},
{0xD162, 0x208C, REG_U16},
{0xD164, 0x800F, REG_U16},
{0xD166, 0xF414, REG_U16},
{0xD168, 0x9116, REG_U16},
{0xD16A, 0x208C, REG_U16},
{0xD16C, 0x800A, REG_U16},
{0xD16E, 0xF410, REG_U16},
{0xD170, 0x9117, REG_U16},
{0xD172, 0x208C, REG_U16},
{0xD174, 0x8807, REG_U16},
{0xD176, 0xF40C, REG_U16},
{0xD178, 0x9118, REG_U16},
{0xD17A, 0x2086, REG_U16},
{0xD17C, 0x0FF3, REG_U16},
{0xD17E, 0xB848, REG_U16},
{0xD180, 0x080D, REG_U16},
{0xD182, 0x0090, REG_U16},
{0xD184, 0xFFEA, REG_U16},
{0xD186, 0xE081, REG_U16},
{0xD188, 0xD801, REG_U16},
{0xD18A, 0xF203, REG_U16},
{0xD18C, 0xD800, REG_U16},
{0xD18E, 0xC0D1, REG_U16},
{0xD190, 0x7EE0, REG_U16},
{0xD192, 0x78E0, REG_U16},
{0xD194, 0xC0F1, REG_U16},
{0xD196, 0x71CF, REG_U16},
{0xD198, 0xFFFF, REG_U16},
{0xD19A, 0xC610, REG_U16},
{0xD19C, 0x910E, REG_U16},
{0xD19E, 0x208C, REG_U16},
{0xD1A0, 0x800A, REG_U16},
{0xD1A2, 0xF418, REG_U16},
{0xD1A4, 0x910F, REG_U16},
{0xD1A6, 0x208C, REG_U16},
{0xD1A8, 0x8807, REG_U16},
{0xD1AA, 0xF414, REG_U16},
{0xD1AC, 0x9116, REG_U16},
{0xD1AE, 0x208C, REG_U16},
{0xD1B0, 0x800A, REG_U16},
{0xD1B2, 0xF410, REG_U16},
{0xD1B4, 0x9117, REG_U16},
{0xD1B6, 0x208C, REG_U16},
{0xD1B8, 0x8807, REG_U16},
{0xD1BA, 0xF40C, REG_U16},
{0xD1BC, 0x9118, REG_U16},
{0xD1BE, 0x2086, REG_U16},
{0xD1C0, 0x0FF3, REG_U16},
{0xD1C2, 0xB848, REG_U16},
{0xD1C4, 0x080D, REG_U16},
{0xD1C6, 0x0090, REG_U16},
{0xD1C8, 0xFFD9, REG_U16},
{0xD1CA, 0xE080, REG_U16},
{0xD1CC, 0xD801, REG_U16},
{0xD1CE, 0xF203, REG_U16},
{0xD1D0, 0xD800, REG_U16},
{0xD1D2, 0xF1DF, REG_U16},
{0xD1D4, 0x9040, REG_U16},
{0xD1D6, 0x71CF, REG_U16},
{0xD1D8, 0xFFFF, REG_U16},
{0xD1DA, 0xC5D4, REG_U16},
{0xD1DC, 0xB15A, REG_U16},
{0xD1DE, 0x9041, REG_U16},
{0xD1E0, 0x73CF, REG_U16},
{0xD1E2, 0xFFFF, REG_U16},
{0xD1E4, 0xC7D0, REG_U16},
{0xD1E6, 0xB140, REG_U16},
{0xD1E8, 0x9042, REG_U16},
{0xD1EA, 0xB141, REG_U16},
{0xD1EC, 0x9043, REG_U16},
{0xD1EE, 0xB142, REG_U16},
{0xD1F0, 0x9044, REG_U16},
{0xD1F2, 0xB143, REG_U16},
{0xD1F4, 0x9045, REG_U16},
{0xD1F6, 0xB147, REG_U16},
{0xD1F8, 0x9046, REG_U16},
{0xD1FA, 0xB148, REG_U16},
{0xD1FC, 0x9047, REG_U16},
{0xD1FE, 0xB14B, REG_U16},
{0xD200, 0x9048, REG_U16},
{0xD202, 0xB14C, REG_U16},
{0xD204, 0x9049, REG_U16},
{0xD206, 0x1958, REG_U16},
{0xD208, 0x0084, REG_U16},
{0xD20A, 0x904A, REG_U16},
{0xD20C, 0x195A, REG_U16},
{0xD20E, 0x0084, REG_U16},
{0xD210, 0x8856, REG_U16},
{0xD212, 0x1B36, REG_U16},
{0xD214, 0x8082, REG_U16},
{0xD216, 0x8857, REG_U16},
{0xD218, 0x1B37, REG_U16},
{0xD21A, 0x8082, REG_U16},
{0xD21C, 0x904C, REG_U16},
{0xD21E, 0x19A7, REG_U16},
{0xD220, 0x009C, REG_U16},
{0xD222, 0x881A, REG_U16},
{0xD224, 0x7FE0, REG_U16},
{0xD226, 0x1B54, REG_U16},
{0xD228, 0x8002, REG_U16},
{0xD22A, 0x78E0, REG_U16},
{0xD22C, 0x71CF, REG_U16},
{0xD22E, 0xFFFF, REG_U16},
{0xD230, 0xC350, REG_U16},
{0xD232, 0xD828, REG_U16},
{0xD234, 0xA90B, REG_U16},
{0xD236, 0x8100, REG_U16},
{0xD238, 0x01C5, REG_U16},
{0xD23A, 0x0320, REG_U16},
{0xD23C, 0xD900, REG_U16},
{0xD23E, 0x78E0, REG_U16},
{0xD240, 0x220A, REG_U16},
{0xD242, 0x1F80, REG_U16},
{0xD244, 0xFFFF, REG_U16},
{0xD246, 0xD4E0, REG_U16},
{0xD248, 0xC0F1, REG_U16},
{0xD24A, 0x0811, REG_U16},
{0xD24C, 0x0051, REG_U16},
{0xD24E, 0x2240, REG_U16},
{0xD250, 0x1200, REG_U16},
{0xD252, 0xFFE1, REG_U16},
{0xD254, 0xD801, REG_U16},
{0xD256, 0xF006, REG_U16},
{0xD258, 0x2240, REG_U16},
{0xD25A, 0x1900, REG_U16},
{0xD25C, 0xFFDE, REG_U16},
{0xD25E, 0xD802, REG_U16},
{0xD260, 0x1A05, REG_U16},
{0xD262, 0x1002, REG_U16},
{0xD264, 0xFFF2, REG_U16},
{0xD266, 0xF195, REG_U16},
{0xD268, 0xC0F1, REG_U16},
{0xD26A, 0x0E7E, REG_U16},
{0xD26C, 0x05C0, REG_U16},
{0xD26E, 0x75CF, REG_U16},
{0xD270, 0xFFFF, REG_U16},
{0xD272, 0xC84C, REG_U16},
{0xD274, 0x9502, REG_U16},
{0xD276, 0x77CF, REG_U16},
{0xD278, 0xFFFF, REG_U16},
{0xD27A, 0xC344, REG_U16},
{0xD27C, 0x2044, REG_U16},
{0xD27E, 0x008E, REG_U16},
{0xD280, 0xB8A1, REG_U16},
{0xD282, 0x0926, REG_U16},
{0xD284, 0x03E0, REG_U16},
{0xD286, 0xB502, REG_U16},
{0xD288, 0x9502, REG_U16},
{0xD28A, 0x952E, REG_U16},
{0xD28C, 0x7E05, REG_U16},
{0xD28E, 0xB5C2, REG_U16},
{0xD290, 0x70CF, REG_U16},
{0xD292, 0xFFFF, REG_U16},
{0xD294, 0xC610, REG_U16},
{0xD296, 0x099A, REG_U16},
{0xD298, 0x04A0, REG_U16},
{0xD29A, 0xB026, REG_U16},
{0xD29C, 0x0E02, REG_U16},
{0xD29E, 0x0560, REG_U16},
{0xD2A0, 0xDE00, REG_U16},
{0xD2A2, 0x0A12, REG_U16},
{0xD2A4, 0x0320, REG_U16},
{0xD2A6, 0xB7C4, REG_U16},
{0xD2A8, 0x0B36, REG_U16},
{0xD2AA, 0x03A0, REG_U16},
{0xD2AC, 0x70C9, REG_U16},
{0xD2AE, 0x9502, REG_U16},
{0xD2B0, 0x7608, REG_U16},
{0xD2B2, 0xB8A8, REG_U16},
{0xD2B4, 0xB502, REG_U16},
{0xD2B6, 0x70CF, REG_U16},
{0xD2B8, 0x0000, REG_U16},
{0xD2BA, 0x5536, REG_U16},
{0xD2BC, 0x7860, REG_U16},
{0xD2BE, 0x2686, REG_U16},
{0xD2C0, 0x1FFB, REG_U16},
{0xD2C2, 0x9502, REG_U16},
{0xD2C4, 0x78C5, REG_U16},
{0xD2C6, 0x0631, REG_U16},
{0xD2C8, 0x05E0, REG_U16},
{0xD2CA, 0xB502, REG_U16},
{0xD2CC, 0x72CF, REG_U16},
{0xD2CE, 0xFFFF, REG_U16},
{0xD2D0, 0xC5D4, REG_U16},
{0xD2D2, 0x923A, REG_U16},
{0xD2D4, 0x73CF, REG_U16},
{0xD2D6, 0xFFFF, REG_U16},
{0xD2D8, 0xC7D0, REG_U16},
{0xD2DA, 0xB020, REG_U16},
{0xD2DC, 0x9220, REG_U16},
{0xD2DE, 0xB021, REG_U16},
{0xD2E0, 0x9221, REG_U16},
{0xD2E2, 0xB022, REG_U16},
{0xD2E4, 0x9222, REG_U16},
{0xD2E6, 0xB023, REG_U16},
{0xD2E8, 0x9223, REG_U16},
{0xD2EA, 0xB024, REG_U16},
{0xD2EC, 0x9227, REG_U16},
{0xD2EE, 0xB025, REG_U16},
{0xD2F0, 0x9228, REG_U16},
{0xD2F2, 0xB026, REG_U16},
{0xD2F4, 0x922B, REG_U16},
{0xD2F6, 0xB027, REG_U16},
{0xD2F8, 0x922C, REG_U16},
{0xD2FA, 0xB028, REG_U16},
{0xD2FC, 0x1258, REG_U16},
{0xD2FE, 0x0101, REG_U16},
{0xD300, 0xB029, REG_U16},
{0xD302, 0x125A, REG_U16},
{0xD304, 0x0101, REG_U16},
{0xD306, 0xB02A, REG_U16},
{0xD308, 0x1336, REG_U16},
{0xD30A, 0x8081, REG_U16},
{0xD30C, 0xA836, REG_U16},
{0xD30E, 0x1337, REG_U16},
{0xD310, 0x8081, REG_U16},
{0xD312, 0xA837, REG_U16},
{0xD314, 0x12A7, REG_U16},
{0xD316, 0x0701, REG_U16},
{0xD318, 0xB02C, REG_U16},
{0xD31A, 0x1354, REG_U16},
{0xD31C, 0x8081, REG_U16},
{0xD31E, 0x7FE0, REG_U16},
{0xD320, 0xA83A, REG_U16},
{0xD322, 0x78E0, REG_U16},
{0xD324, 0xC0F1, REG_U16},
{0xD326, 0x0DC2, REG_U16},
{0xD328, 0x05C0, REG_U16},
{0xD32A, 0x7608, REG_U16},
{0xD32C, 0x09BB, REG_U16},
{0xD32E, 0x0010, REG_U16},
{0xD330, 0x75CF, REG_U16},
{0xD332, 0xFFFF, REG_U16},
{0xD334, 0xD4E0, REG_U16},
{0xD336, 0x8D21, REG_U16},
{0xD338, 0x8D00, REG_U16},
{0xD33A, 0x2153, REG_U16},
{0xD33C, 0x0003, REG_U16},
{0xD33E, 0xB8C0, REG_U16},
{0xD340, 0x8D45, REG_U16},
{0xD342, 0x0B23, REG_U16},
{0xD344, 0x0000, REG_U16},
{0xD346, 0xEA8F, REG_U16},
{0xD348, 0x0915, REG_U16},
{0xD34A, 0x001E, REG_U16},
{0xD34C, 0xFF81, REG_U16},
{0xD34E, 0xE808, REG_U16},
{0xD350, 0x2540, REG_U16},
{0xD352, 0x1900, REG_U16},
{0xD354, 0xFFDE, REG_U16},
{0xD356, 0x8D00, REG_U16},
{0xD358, 0xB880, REG_U16},
{0xD35A, 0xF004, REG_U16},
{0xD35C, 0x8D00, REG_U16},
{0xD35E, 0xB8A0, REG_U16},
{0xD360, 0xAD00, REG_U16},
{0xD362, 0x8D05, REG_U16},
{0xD364, 0xE081, REG_U16},
{0xD366, 0x20CC, REG_U16},
{0xD368, 0x80A2, REG_U16},
{0xD36A, 0xDF00, REG_U16},
{0xD36C, 0xF40A, REG_U16},
{0xD36E, 0x71CF, REG_U16},
{0xD370, 0xFFFF, REG_U16},
{0xD372, 0xC84C, REG_U16},
{0xD374, 0x9102, REG_U16},
{0xD376, 0x7708, REG_U16},
{0xD378, 0xB8A6, REG_U16},
{0xD37A, 0x2786, REG_U16},
{0xD37C, 0x1FFE, REG_U16},
{0xD37E, 0xB102, REG_U16},
{0xD380, 0x0B42, REG_U16},
{0xD382, 0x0180, REG_U16},
{0xD384, 0x0E3E, REG_U16},
{0xD386, 0x0180, REG_U16},
{0xD388, 0x0F4A, REG_U16},
{0xD38A, 0x0160, REG_U16},
{0xD38C, 0x70C9, REG_U16},
{0xD38E, 0x8D05, REG_U16},
{0xD390, 0xE081, REG_U16},
{0xD392, 0x20CC, REG_U16},
{0xD394, 0x80A2, REG_U16},
{0xD396, 0xF429, REG_U16},
{0xD398, 0x76CF, REG_U16},
{0xD39A, 0xFFFF, REG_U16},
{0xD39C, 0xC84C, REG_U16},
{0xD39E, 0x082D, REG_U16},
{0xD3A0, 0x0051, REG_U16},
{0xD3A2, 0x70CF, REG_U16},
{0xD3A4, 0xFFFF, REG_U16},
{0xD3A6, 0xC90C, REG_U16},
{0xD3A8, 0x8805, REG_U16},
{0xD3AA, 0x09B6, REG_U16},
{0xD3AC, 0x0360, REG_U16},
{0xD3AE, 0xD908, REG_U16},
{0xD3B0, 0x2099, REG_U16},
{0xD3B2, 0x0802, REG_U16},
{0xD3B4, 0x9634, REG_U16},
{0xD3B6, 0xB503, REG_U16},
{0xD3B8, 0x7902, REG_U16},
{0xD3BA, 0x1523, REG_U16},
{0xD3BC, 0x1080, REG_U16},
{0xD3BE, 0xB634, REG_U16},
{0xD3C0, 0xE001, REG_U16},
{0xD3C2, 0x1D23, REG_U16},
{0xD3C4, 0x1002, REG_U16},
{0xD3C6, 0xF00B, REG_U16},
{0xD3C8, 0x9634, REG_U16},
{0xD3CA, 0x9503, REG_U16},
{0xD3CC, 0x6038, REG_U16},
{0xD3CE, 0xB614, REG_U16},
{0xD3D0, 0x153F, REG_U16},
{0xD3D2, 0x1080, REG_U16},
{0xD3D4, 0xE001, REG_U16},
{0xD3D6, 0x1D3F, REG_U16},
{0xD3D8, 0x1002, REG_U16},
{0xD3DA, 0xFFA4, REG_U16},
{0xD3DC, 0x9602, REG_U16},
{0xD3DE, 0x7F05, REG_U16},
{0xD3E0, 0xD800, REG_U16},
{0xD3E2, 0xB6E2, REG_U16},
{0xD3E4, 0xAD05, REG_U16},
{0xD3E6, 0x0511, REG_U16},
{0xD3E8, 0x05E0, REG_U16},
{0xD3EA, 0xD800, REG_U16},
{0xD3EC, 0xC0F1, REG_U16},
{0xD3EE, 0x0CFE, REG_U16},
{0xD3F0, 0x05C0, REG_U16},
{0xD3F2, 0x0A96, REG_U16},
{0xD3F4, 0x05A0, REG_U16},
{0xD3F6, 0x7608, REG_U16},
{0xD3F8, 0x0C22, REG_U16},
{0xD3FA, 0x0240, REG_U16},
{0xD3FC, 0xE080, REG_U16},
{0xD3FE, 0x20CA, REG_U16},
{0xD400, 0x0F82, REG_U16},
{0xD402, 0x0000, REG_U16},
{0xD404, 0x190B, REG_U16},
{0xD406, 0x0C60, REG_U16},
{0xD408, 0x05A2, REG_U16},
{0xD40A, 0x21CA, REG_U16},
{0xD40C, 0x0022, REG_U16},
{0xD40E, 0x0C56, REG_U16},
{0xD410, 0x0240, REG_U16},
{0xD412, 0xE806, REG_U16},
{0xD414, 0x0E0E, REG_U16},
{0xD416, 0x0220, REG_U16},
{0xD418, 0x70C9, REG_U16},
{0xD41A, 0xF048, REG_U16},
{0xD41C, 0x0896, REG_U16},
{0xD41E, 0x0440, REG_U16},
{0xD420, 0x0E96, REG_U16},
{0xD422, 0x0400, REG_U16},
{0xD424, 0x0966, REG_U16},
{0xD426, 0x0380, REG_U16},
{0xD428, 0x75CF, REG_U16},
{0xD42A, 0xFFFF, REG_U16},
{0xD42C, 0xD4E0, REG_U16},
{0xD42E, 0x8D00, REG_U16},
{0xD430, 0x084D, REG_U16},
{0xD432, 0x001E, REG_U16},
{0xD434, 0xFF47, REG_U16},
{0xD436, 0x080D, REG_U16},
{0xD438, 0x0050, REG_U16},
{0xD43A, 0xFF57, REG_U16},
{0xD43C, 0x0841, REG_U16},
{0xD43E, 0x0051, REG_U16},
{0xD440, 0x8D04, REG_U16},
{0xD442, 0x9521, REG_U16},
{0xD444, 0xE064, REG_U16},
{0xD446, 0x790C, REG_U16},
{0xD448, 0x702F, REG_U16},
{0xD44A, 0x0CE2, REG_U16},
{0xD44C, 0x05E0, REG_U16},
{0xD44E, 0xD964, REG_U16},
{0xD450, 0x72CF, REG_U16},
{0xD452, 0xFFFF, REG_U16},
{0xD454, 0xC700, REG_U16},
{0xD456, 0x9235, REG_U16},
{0xD458, 0x0811, REG_U16},
{0xD45A, 0x0043, REG_U16},
{0xD45C, 0xFF3D, REG_U16},
{0xD45E, 0x080D, REG_U16},
{0xD460, 0x0051, REG_U16},
{0xD462, 0xD801, REG_U16},
{0xD464, 0xFF77, REG_U16},
{0xD466, 0xF025, REG_U16},
{0xD468, 0x9501, REG_U16},
{0xD46A, 0x9235, REG_U16},
{0xD46C, 0x0911, REG_U16},
{0xD46E, 0x0003, REG_U16},
{0xD470, 0xFF49, REG_U16},
{0xD472, 0x080D, REG_U16},
{0xD474, 0x0051, REG_U16},
{0xD476, 0xD800, REG_U16},
{0xD478, 0xFF72, REG_U16},
{0xD47A, 0xF01B, REG_U16},
{0xD47C, 0x0886, REG_U16},
{0xD47E, 0x03E0, REG_U16},
{0xD480, 0xD801, REG_U16},
{0xD482, 0x0EF6, REG_U16},
{0xD484, 0x03C0, REG_U16},
{0xD486, 0x0F52, REG_U16},
{0xD488, 0x0340, REG_U16},
{0xD48A, 0x0DBA, REG_U16},
{0xD48C, 0x0200, REG_U16},
{0xD48E, 0x0AF6, REG_U16},
{0xD490, 0x0440, REG_U16},
{0xD492, 0x0C22, REG_U16},
{0xD494, 0x0400, REG_U16},
{0xD496, 0x0D72, REG_U16},
{0xD498, 0x0440, REG_U16},
{0xD49A, 0x0DC2, REG_U16},
{0xD49C, 0x0200, REG_U16},
{0xD49E, 0x0972, REG_U16},
{0xD4A0, 0x0440, REG_U16},
{0xD4A2, 0x0D3A, REG_U16},
{0xD4A4, 0x0220, REG_U16},
{0xD4A6, 0xD820, REG_U16},
{0xD4A8, 0x0BFA, REG_U16},
{0xD4AA, 0x0260, REG_U16},
{0xD4AC, 0x70C9, REG_U16},
{0xD4AE, 0x0451, REG_U16},
{0xD4B0, 0x05C0, REG_U16},
{0xD4B2, 0x78E0, REG_U16},
{0xD4B4, 0xD900, REG_U16},
{0xD4B6, 0xF00A, REG_U16},
{0xD4B8, 0x70CF, REG_U16},
{0xD4BA, 0xFFFF, REG_U16},
{0xD4BC, 0xD520, REG_U16},
{0xD4BE, 0x7835, REG_U16},
{0xD4C0, 0x8041, REG_U16},
{0xD4C2, 0x8000, REG_U16},
{0xD4C4, 0xE102, REG_U16},
{0xD4C6, 0xA040, REG_U16},
{0xD4C8, 0x09F1, REG_U16},
{0xD4CA, 0x8114, REG_U16},
{0xD4CC, 0x71CF, REG_U16},
{0xD4CE, 0xFFFF, REG_U16},
{0xD4D0, 0xD4E0, REG_U16},
{0xD4D2, 0x70CF, REG_U16},
{0xD4D4, 0xFFFF, REG_U16},
{0xD4D6, 0xC594, REG_U16},
{0xD4D8, 0xB03A, REG_U16},
{0xD4DA, 0x7FE0, REG_U16},
{0xD4DC, 0xD800, REG_U16},
{0xD4DE, 0x0000, REG_U16},
{0xD4E0, 0x0000, REG_U16},
{0xD4E2, 0x0500, REG_U16},
{0xD4E4, 0x0500, REG_U16},
{0xD4E6, 0x0200, REG_U16},
{0xD4E8, 0x0330, REG_U16},
{0xD4EA, 0x0000, REG_U16},
{0xD4EC, 0x0000, REG_U16},
{0xD4EE, 0x03CD, REG_U16},
{0xD4F0, 0x050D, REG_U16},
{0xD4F2, 0x01C5, REG_U16},
{0xD4F4, 0x03B3, REG_U16},
{0xD4F6, 0x00E0, REG_U16},
{0xD4F8, 0x01E3, REG_U16},
{0xD4FA, 0x0280, REG_U16},
{0xD4FC, 0x01E0, REG_U16},
{0xD4FE, 0x0109, REG_U16},
{0xD500, 0x0080, REG_U16},
{0xD502, 0x0500, REG_U16},
{0xD504, 0x0000, REG_U16},
{0xD506, 0x0000, REG_U16},
{0xD508, 0x0000, REG_U16},
{0xD50A, 0x0000, REG_U16},
{0xD50C, 0x0000, REG_U16},
{0xD50E, 0x0000, REG_U16},
{0xD510, 0x0000, REG_U16},
{0xD512, 0x0000, REG_U16},
{0xD514, 0x0000, REG_U16},
{0xD516, 0x0000, REG_U16},
{0xD518, 0x0000, REG_U16},
{0xD51A, 0x0000, REG_U16},
{0xD51C, 0x0000, REG_U16},
{0xD51E, 0x0000, REG_U16},
{0xD520, 0xFFFF, REG_U16},
{0xD522, 0xC9B4, REG_U16},
{0xD524, 0xFFFF, REG_U16},
{0xD526, 0xD324, REG_U16},
{0xD528, 0xFFFF, REG_U16},
{0xD52A, 0xCA34, REG_U16},
{0xD52C, 0xFFFF, REG_U16},
{0xD52E, 0xD3EC, REG_U16},
{0x098E, 0x0000, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS
{0xE000, 0x04B4, REG_U16}, 	// PATCHLDR_LOADER_ADDRESS
{0xE002, 0x0302, REG_U16}, 	// PATCHLDR_PATCH_ID
{0xE004, 0x41030202, REG_U32}, 	// PATCHLDR_FIRMWARE_ID
{0x0080, 0xFFF4, REG_U16}, 	// COMMAND_REGISTER
//  POLL  COMMAND_REGISTER::HOST_COMMAND_0 =>  0x00
//Check 0x0080[0]=0
{POLL_COMMAND_REGISTER, HOST_COMMAND_0, 0},

{0x0080, 0xFFF5, REG_U16}, 	// COMMAND_REGISTER
//  POLL  COMMAND_REGISTER::HOST_COMMAND_0 =>  0x00
//Check 0x0080[0]=0
{POLL_COMMAND_REGISTER, HOST_COMMAND_0, 0},

//Step3.1 Load Patch 1003
// [Patch 1003; FEATURE RECOMMENDED ; Flicker Detect Patch]1: Load=Load Patch 1003
// [Load Patch 1003]1: FIELD_WR=ACCESS_CTL_STAT, 0x0001
{0x0982, 0x0001, REG_U16}, 	// ACCESS_CTL_STAT
// [Load Patch 1003]2: FIELD_WR=PHYSICAL_ADDRESS_ACCESS, 0x5c10
{0x098A, 0x5C10, REG_U16}, 	// PHYSICAL_ADDRESS_ACCESS
// [Load Patch 1003]3: REG_BURST=0xdc10, 0xc0f1, 0x0cda, 0x0580, 0x76cf, 0xff00, 0x2184, 0x9624, 0x218c, 0x8fc3, 0x75cf, 0xffff, 0xe058, 0xf686, 0x1550, 0x1080, 0xe001, 0x1d50, 0x1002, 0x1552, 0x1100, 0x6038, 0x1d52, 0x1004, 0x1540
{0xDC10, 0xC0F1, REG_U16},
{0xDC12, 0x0CDA, REG_U16},
{0xDC14, 0x0580, REG_U16},
{0xDC16, 0x76CF, REG_U16},
{0xDC18, 0xFF00, REG_U16},
{0xDC1A, 0x2184, REG_U16},
{0xDC1C, 0x9624, REG_U16},
{0xDC1E, 0x218C, REG_U16},
{0xDC20, 0x8FC3, REG_U16},
{0xDC22, 0x75CF, REG_U16},
{0xDC24, 0xFFFF, REG_U16},
{0xDC26, 0xE058, REG_U16},
{0xDC28, 0xF686, REG_U16},
{0xDC2A, 0x1550, REG_U16},
{0xDC2C, 0x1080, REG_U16},
{0xDC2E, 0xE001, REG_U16},
{0xDC30, 0x1D50, REG_U16},
{0xDC32, 0x1002, REG_U16},
{0xDC34, 0x1552, REG_U16},
{0xDC36, 0x1100, REG_U16},
{0xDC38, 0x6038, REG_U16},
{0xDC3A, 0x1D52, REG_U16},
{0xDC3C, 0x1004, REG_U16},
{0xDC3E, 0x1540, REG_U16},
// [Load Patch 1003]4: REG_BURST=0xdc40, 0x1080, 0x081b, 0x00d1, 0x8512, 0x1000, 0x00c0, 0x7822, 0x2089, 0x0fc1, 0x2008, 0x0f81, 0xffff, 0xff80, 0x8512, 0x1801, 0x0052, 0xa512, 0x1544, 0x1080, 0xb861, 0x262f, 0xf007, 0x1d44, 0x1002
{0xDC40, 0x1080, REG_U16},
{0xDC42, 0x081B, REG_U16},
{0xDC44, 0x00D1, REG_U16},
{0xDC46, 0x8512, REG_U16},
{0xDC48, 0x1000, REG_U16},
{0xDC4A, 0x00C0, REG_U16},
{0xDC4C, 0x7822, REG_U16},
{0xDC4E, 0x2089, REG_U16},
{0xDC50, 0x0FC1, REG_U16},
{0xDC52, 0x2008, REG_U16},
{0xDC54, 0x0F81, REG_U16},
{0xDC56, 0xFFFF, REG_U16},
{0xDC58, 0xFF80, REG_U16},
{0xDC5A, 0x8512, REG_U16},
{0xDC5C, 0x1801, REG_U16},
{0xDC5E, 0x0052, REG_U16},
{0xDC60, 0xA512, REG_U16},
{0xDC62, 0x1544, REG_U16},
{0xDC64, 0x1080, REG_U16},
{0xDC66, 0xB861, REG_U16},
{0xDC68, 0x262F, REG_U16},
{0xDC6A, 0xF007, REG_U16},
{0xDC6C, 0x1D44, REG_U16},
{0xDC6E, 0x1002, REG_U16},
// [Load Patch 1003]5: REG_BURST=0xdc70, 0x20ca, 0x0021, 0x20cf, 0x04e1, 0x0850, 0x04a1, 0x21ca, 0x0021, 0x1542, 0x1140, 0x8d2c, 0x6038, 0x1d42, 0x1004, 0x1542, 0x1140, 0xb601, 0x046d, 0x0580, 0x78e0, 0xd800, 0xb893, 0x002d, 0x04a0
{0xDC70, 0x20CA, REG_U16},
{0xDC72, 0x0021, REG_U16},
{0xDC74, 0x20CF, REG_U16},
{0xDC76, 0x04E1, REG_U16},
{0xDC78, 0x0850, REG_U16},
{0xDC7A, 0x04A1, REG_U16},
{0xDC7C, 0x21CA, REG_U16},
{0xDC7E, 0x0021, REG_U16},
{0xDC80, 0x1542, REG_U16},
{0xDC82, 0x1140, REG_U16},
{0xDC84, 0x8D2C, REG_U16},
{0xDC86, 0x6038, REG_U16},
{0xDC88, 0x1D42, REG_U16},
{0xDC8A, 0x1004, REG_U16},
{0xDC8C, 0x1542, REG_U16},
{0xDC8E, 0x1140, REG_U16},
{0xDC90, 0xB601, REG_U16},
{0xDC92, 0x046D, REG_U16},
{0xDC94, 0x0580, REG_U16},
{0xDC96, 0x78E0, REG_U16},
{0xDC98, 0xD800, REG_U16},
{0xDC9A, 0xB893, REG_U16},
{0xDC9C, 0x002D, REG_U16},
{0xDC9E, 0x04A0, REG_U16},
// [Load Patch 1003]6: REG_BURST=0xdca0, 0xd900, 0x78e0, 0x72cf, 0xffff, 0xe058, 0x2240, 0x0340, 0xa212, 0x208a, 0x0fff, 0x1a42, 0x0004, 0xd830, 0x1a44, 0x0002, 0xd800, 0x1a50, 0x0002, 0x1a52, 0x0004, 0x1242, 0x0140, 0x8a2c, 0x6038
{0xDCA0, 0xD900, REG_U16},
{0xDCA2, 0x78E0, REG_U16},
{0xDCA4, 0x72CF, REG_U16},
{0xDCA6, 0xFFFF, REG_U16},
{0xDCA8, 0xE058, REG_U16},
{0xDCAA, 0x2240, REG_U16},
{0xDCAC, 0x0340, REG_U16},
{0xDCAE, 0xA212, REG_U16},
{0xDCB0, 0x208A, REG_U16},
{0xDCB2, 0x0FFF, REG_U16},
{0xDCB4, 0x1A42, REG_U16},
{0xDCB6, 0x0004, REG_U16},
{0xDCB8, 0xD830, REG_U16},
{0xDCBA, 0x1A44, REG_U16},
{0xDCBC, 0x0002, REG_U16},
{0xDCBE, 0xD800, REG_U16},
{0xDCC0, 0x1A50, REG_U16},
{0xDCC2, 0x0002, REG_U16},
{0xDCC4, 0x1A52, REG_U16},
{0xDCC6, 0x0004, REG_U16},
{0xDCC8, 0x1242, REG_U16},
{0xDCCA, 0x0140, REG_U16},
{0xDCCC, 0x8A2C, REG_U16},
{0xDCCE, 0x6038, REG_U16},
// [Load Patch 1003]7: REG_BURST=0xdcd0, 0x1a42, 0x0004, 0x1242, 0x0141, 0x70cf, 0xff00, 0x2184, 0xb021, 0xd800, 0xb893, 0x07e5, 0x0460, 0xd901, 0x78e0, 0xc0f1, 0x0bfa, 0x05a0, 0x216f, 0x0043, 0xc1a4, 0x220a, 0x1f80, 0xffff, 0xe058
{0xDCD0, 0x1A42, REG_U16},
{0xDCD2, 0x0004, REG_U16},
{0xDCD4, 0x1242, REG_U16},
{0xDCD6, 0x0141, REG_U16},
{0xDCD8, 0x70CF, REG_U16},
{0xDCDA, 0xFF00, REG_U16},
{0xDCDC, 0x2184, REG_U16},
{0xDCDE, 0xB021, REG_U16},
{0xDCE0, 0xD800, REG_U16},
{0xDCE2, 0xB893, REG_U16},
{0xDCE4, 0x07E5, REG_U16},
{0xDCE6, 0x0460, REG_U16},
{0xDCE8, 0xD901, REG_U16},
{0xDCEA, 0x78E0, REG_U16},
{0xDCEC, 0xC0F1, REG_U16},
{0xDCEE, 0x0BFA, REG_U16},
{0xDCF0, 0x05A0, REG_U16},
{0xDCF2, 0x216F, REG_U16},
{0xDCF4, 0x0043, REG_U16},
{0xDCF6, 0xC1A4, REG_U16},
{0xDCF8, 0x220A, REG_U16},
{0xDCFA, 0x1F80, REG_U16},
{0xDCFC, 0xFFFF, REG_U16},
{0xDCFE, 0xE058, REG_U16},
// [Load Patch 1003]8: REG_BURST=0xdd00, 0x2240, 0x134f, 0x1a48, 0x13c0, 0x1248, 0x1002, 0x70cf, 0x7fff, 0xffff, 0xe230, 0xc240, 0xda00, 0xf00c, 0x1248, 0x1003, 0x1301, 0x04cb, 0x7261, 0x2108, 0x0081, 0x2009, 0x0080, 0x1a48, 0x10c0
{0xDD00, 0x2240, REG_U16},
{0xDD02, 0x134F, REG_U16},
{0xDD04, 0x1A48, REG_U16},
{0xDD06, 0x13C0, REG_U16},
{0xDD08, 0x1248, REG_U16},
{0xDD0A, 0x1002, REG_U16},
{0xDD0C, 0x70CF, REG_U16},
{0xDD0E, 0x7FFF, REG_U16},
{0xDD10, 0xFFFF, REG_U16},
{0xDD12, 0xE230, REG_U16},
{0xDD14, 0xC240, REG_U16},
{0xDD16, 0xDA00, REG_U16},
{0xDD18, 0xF00C, REG_U16},
{0xDD1A, 0x1248, REG_U16},
{0xDD1C, 0x1003, REG_U16},
{0xDD1E, 0x1301, REG_U16},
{0xDD20, 0x04CB, REG_U16},
{0xDD22, 0x7261, REG_U16},
{0xDD24, 0x2108, REG_U16},
{0xDD26, 0x0081, REG_U16},
{0xDD28, 0x2009, REG_U16},
{0xDD2A, 0x0080, REG_U16},
{0xDD2C, 0x1A48, REG_U16},
{0xDD2E, 0x10C0, REG_U16},
// [Load Patch 1003]9: REG_BURST=0xdd30, 0x1248, 0x100b, 0xc300, 0x0be7, 0x90c4, 0x2102, 0x0003, 0x238c, 0x8fc3, 0xf6c7, 0xdaff, 0x1a05, 0x1082, 0xc241, 0xf005, 0x7a6f, 0xc241, 0x1a05, 0x10c2, 0x2000, 0x8040, 0xda00, 0x20c0, 0x0064
{0xDD30, 0x1248, REG_U16},
{0xDD32, 0x100B, REG_U16},
{0xDD34, 0xC300, REG_U16},
{0xDD36, 0x0BE7, REG_U16},
{0xDD38, 0x90C4, REG_U16},
{0xDD3A, 0x2102, REG_U16},
{0xDD3C, 0x0003, REG_U16},
{0xDD3E, 0x238C, REG_U16},
{0xDD40, 0x8FC3, REG_U16},
{0xDD42, 0xF6C7, REG_U16},
{0xDD44, 0xDAFF, REG_U16},
{0xDD46, 0x1A05, REG_U16},
{0xDD48, 0x1082, REG_U16},
{0xDD4A, 0xC241, REG_U16},
{0xDD4C, 0xF005, REG_U16},
{0xDD4E, 0x7A6F, REG_U16},
{0xDD50, 0xC241, REG_U16},
{0xDD52, 0x1A05, REG_U16},
{0xDD54, 0x10C2, REG_U16},
{0xDD56, 0x2000, REG_U16},
{0xDD58, 0x8040, REG_U16},
{0xDD5A, 0xDA00, REG_U16},
{0xDD5C, 0x20C0, REG_U16},
{0xDD5E, 0x0064, REG_U16},
// [Load Patch 1003]10: REG_BURST=0xdd60, 0x781c, 0xc042, 0x1c0e, 0x3082, 0x1a48, 0x13c0, 0x7548, 0x7348, 0x7148, 0x7648, 0xf002, 0x7608, 0x1248, 0x1000, 0x1400, 0x300b, 0x084d, 0x02c5, 0x1248, 0x1000, 0xe101, 0x1001, 0x04cb, 0x1a48
{0xDD60, 0x781C, REG_U16},
{0xDD62, 0xC042, REG_U16},
{0xDD64, 0x1C0E, REG_U16},
{0xDD66, 0x3082, REG_U16},
{0xDD68, 0x1A48, REG_U16},
{0xDD6A, 0x13C0, REG_U16},
{0xDD6C, 0x7548, REG_U16},
{0xDD6E, 0x7348, REG_U16},
{0xDD70, 0x7148, REG_U16},
{0xDD72, 0x7648, REG_U16},
{0xDD74, 0xF002, REG_U16},
{0xDD76, 0x7608, REG_U16},
{0xDD78, 0x1248, REG_U16},
{0xDD7A, 0x1000, REG_U16},
{0xDD7C, 0x1400, REG_U16},
{0xDD7E, 0x300B, REG_U16},
{0xDD80, 0x084D, REG_U16},
{0xDD82, 0x02C5, REG_U16},
{0xDD84, 0x1248, REG_U16},
{0xDD86, 0x1000, REG_U16},
{0xDD88, 0xE101, REG_U16},
{0xDD8A, 0x1001, REG_U16},
{0xDD8C, 0x04CB, REG_U16},
{0xDD8E, 0x1A48, REG_U16},
// [Load Patch 1003]11: REG_BURST=0xdd90, 0x1000, 0x7361, 0x1408, 0x300b, 0x2302, 0x02c0, 0x780d, 0x2607, 0x903e, 0x07d6, 0xffe3, 0x792f, 0x09cf, 0x8152, 0x1248, 0x100e, 0x2400, 0x334b, 0xe501, 0x7ee2, 0x0dbf, 0x90f2, 0x1b0c, 0x1382
{0xDD90, 0x1000, REG_U16},
{0xDD92, 0x7361, REG_U16},
{0xDD94, 0x1408, REG_U16},
{0xDD96, 0x300B, REG_U16},
{0xDD98, 0x2302, REG_U16},
{0xDD9A, 0x02C0, REG_U16},
{0xDD9C, 0x780D, REG_U16},
{0xDD9E, 0x2607, REG_U16},
{0xDDA0, 0x903E, REG_U16},
{0xDDA2, 0x07D6, REG_U16},
{0xDDA4, 0xFFE3, REG_U16},
{0xDDA6, 0x792F, REG_U16},
{0xDDA8, 0x09CF, REG_U16},
{0xDDAA, 0x8152, REG_U16},
{0xDDAC, 0x1248, REG_U16},
{0xDDAE, 0x100E, REG_U16},
{0xDDB0, 0x2400, REG_U16},
{0xDDB2, 0x334B, REG_U16},
{0xDDB4, 0xE501, REG_U16},
{0xDDB6, 0x7EE2, REG_U16},
{0xDDB8, 0x0DBF, REG_U16},
{0xDDBA, 0x90F2, REG_U16},
{0xDDBC, 0x1B0C, REG_U16},
{0xDDBE, 0x1382, REG_U16},
// [Load Patch 1003]12: REG_BURST=0xddc0, 0xc123, 0x140e, 0x3080, 0x7822, 0x1a07, 0x1002, 0x124c, 0x1000, 0x120b, 0x1081, 0x1207, 0x1083, 0x2142, 0x004b, 0x781b, 0x0b21, 0x02e2, 0x1a4c, 0x1000, 0xe101, 0x0915, 0x00c2, 0xc101, 0x1204
{0xDDC0, 0xC123, REG_U16},
{0xDDC2, 0x140E, REG_U16},
{0xDDC4, 0x3080, REG_U16},
{0xDDC6, 0x7822, REG_U16},
{0xDDC8, 0x1A07, REG_U16},
{0xDDCA, 0x1002, REG_U16},
{0xDDCC, 0x124C, REG_U16},
{0xDDCE, 0x1000, REG_U16},
{0xDDD0, 0x120B, REG_U16},
{0xDDD2, 0x1081, REG_U16},
{0xDDD4, 0x1207, REG_U16},
{0xDDD6, 0x1083, REG_U16},
{0xDDD8, 0x2142, REG_U16},
{0xDDDA, 0x004B, REG_U16},
{0xDDDC, 0x781B, REG_U16},
{0xDDDE, 0x0B21, REG_U16},
{0xDDE0, 0x02E2, REG_U16},
{0xDDE2, 0x1A4C, REG_U16},
{0xDDE4, 0x1000, REG_U16},
{0xDDE6, 0xE101, REG_U16},
{0xDDE8, 0x0915, REG_U16},
{0xDDEA, 0x00C2, REG_U16},
{0xDDEC, 0xC101, REG_U16},
{0xDDEE, 0x1204, REG_U16},
// [Load Patch 1003]13: REG_BURST=0xddf0, 0x1083, 0x090d, 0x00c2, 0xe001, 0x1a4c, 0x1000, 0x1a06, 0x1002, 0x234a, 0x1000, 0x7169, 0xf008, 0x2053, 0x0003, 0x6179, 0x781c, 0x2340, 0x104b, 0x1203, 0x1083, 0x0bf1, 0x90c2, 0x1202, 0x1080
{0xDDF0, 0x1083, REG_U16},
{0xDDF2, 0x090D, REG_U16},
{0xDDF4, 0x00C2, REG_U16},
{0xDDF6, 0xE001, REG_U16},
{0xDDF8, 0x1A4C, REG_U16},
{0xDDFA, 0x1000, REG_U16},
{0xDDFC, 0x1A06, REG_U16},
{0xDDFE, 0x1002, REG_U16},
{0xDE00, 0x234A, REG_U16},
{0xDE02, 0x1000, REG_U16},
{0xDE04, 0x7169, REG_U16},
{0xDE06, 0xF008, REG_U16},
{0xDE08, 0x2053, REG_U16},
{0xDE0A, 0x0003, REG_U16},
{0xDE0C, 0x6179, REG_U16},
{0xDE0E, 0x781C, REG_U16},
{0xDE10, 0x2340, REG_U16},
{0xDE12, 0x104B, REG_U16},
{0xDE14, 0x1203, REG_U16},
{0xDE16, 0x1083, REG_U16},
{0xDE18, 0x0BF1, REG_U16},
{0xDE1A, 0x90C2, REG_U16},
{0xDE1C, 0x1202, REG_U16},
{0xDE1E, 0x1080, REG_U16},
// [Load Patch 1003]14: REG_BURST=0xde20, 0x091d, 0x0004, 0x70cf, 0xffff, 0xc644, 0x881b, 0xe0b2, 0xd83c, 0x20ca, 0x0ca2, 0x1a01, 0x1002, 0x1a4c, 0x1080, 0x02b9, 0x05a0, 0xc0a4, 0x78e0, 0xc0f1, 0xff95, 0xd800, 0x71cf, 0xff00, 0x1fe0
{0xDE20, 0x091D, REG_U16},
{0xDE22, 0x0004, REG_U16},
{0xDE24, 0x70CF, REG_U16},
{0xDE26, 0xFFFF, REG_U16},
{0xDE28, 0xC644, REG_U16},
{0xDE2A, 0x881B, REG_U16},
{0xDE2C, 0xE0B2, REG_U16},
{0xDE2E, 0xD83C, REG_U16},
{0xDE30, 0x20CA, REG_U16},
{0xDE32, 0x0CA2, REG_U16},
{0xDE34, 0x1A01, REG_U16},
{0xDE36, 0x1002, REG_U16},
{0xDE38, 0x1A4C, REG_U16},
{0xDE3A, 0x1080, REG_U16},
{0xDE3C, 0x02B9, REG_U16},
{0xDE3E, 0x05A0, REG_U16},
{0xDE40, 0xC0A4, REG_U16},
{0xDE42, 0x78E0, REG_U16},
{0xDE44, 0xC0F1, REG_U16},
{0xDE46, 0xFF95, REG_U16},
{0xDE48, 0xD800, REG_U16},
{0xDE4A, 0x71CF, REG_U16},
{0xDE4C, 0xFF00, REG_U16},
{0xDE4E, 0x1FE0, REG_U16},
// [Load Patch 1003]15: REG_BURST=0xde50, 0x19d0, 0x001c, 0x19d1, 0x001c, 0x70cf, 0xffff, 0xe058, 0x901f, 0xb861, 0x19d2, 0x001c, 0xc0d1, 0x7ee0, 0x78e0, 0xc0f1, 0x0a7a, 0x0580, 0x70cf, 0xffff, 0xc5d4, 0x9041, 0x9023, 0x75cf, 0xffff
{0xDE50, 0x19D0, REG_U16},
{0xDE52, 0x001C, REG_U16},
{0xDE54, 0x19D1, REG_U16},
{0xDE56, 0x001C, REG_U16},
{0xDE58, 0x70CF, REG_U16},
{0xDE5A, 0xFFFF, REG_U16},
{0xDE5C, 0xE058, REG_U16},
{0xDE5E, 0x901F, REG_U16},
{0xDE60, 0xB861, REG_U16},
{0xDE62, 0x19D2, REG_U16},
{0xDE64, 0x001C, REG_U16},
{0xDE66, 0xC0D1, REG_U16},
{0xDE68, 0x7EE0, REG_U16},
{0xDE6A, 0x78E0, REG_U16},
{0xDE6C, 0xC0F1, REG_U16},
{0xDE6E, 0x0A7A, REG_U16},
{0xDE70, 0x0580, REG_U16},
{0xDE72, 0x70CF, REG_U16},
{0xDE74, 0xFFFF, REG_U16},
{0xDE76, 0xC5D4, REG_U16},
{0xDE78, 0x9041, REG_U16},
{0xDE7A, 0x9023, REG_U16},
{0xDE7C, 0x75CF, REG_U16},
{0xDE7E, 0xFFFF, REG_U16},
// [Load Patch 1003]16: REG_BURST=0xde80, 0xe058, 0x7942, 0xb967, 0x7f30, 0xb53f, 0x71cf, 0xffff, 0xc84c, 0x91d3, 0x108b, 0x0081, 0x2615, 0x1380, 0x090f, 0x0c91, 0x0a8e, 0x05a0, 0xd906, 0x7e10, 0x2615, 0x1380, 0x0a82, 0x05a0, 0xd960
{0xDE80, 0xE058, REG_U16},
{0xDE82, 0x7942, REG_U16},
{0xDE84, 0xB967, REG_U16},
{0xDE86, 0x7F30, REG_U16},
{0xDE88, 0xB53F, REG_U16},
{0xDE8A, 0x71CF, REG_U16},
{0xDE8C, 0xFFFF, REG_U16},
{0xDE8E, 0xC84C, REG_U16},
{0xDE90, 0x91D3, REG_U16},
{0xDE92, 0x108B, REG_U16},
{0xDE94, 0x0081, REG_U16},
{0xDE96, 0x2615, REG_U16},
{0xDE98, 0x1380, REG_U16},
{0xDE9A, 0x090F, REG_U16},
{0xDE9C, 0x0C91, REG_U16},
{0xDE9E, 0x0A8E, REG_U16},
{0xDEA0, 0x05A0, REG_U16},
{0xDEA2, 0xD906, REG_U16},
{0xDEA4, 0x7E10, REG_U16},
{0xDEA6, 0x2615, REG_U16},
{0xDEA8, 0x1380, REG_U16},
{0xDEAA, 0x0A82, REG_U16},
{0xDEAC, 0x05A0, REG_U16},
{0xDEAE, 0xD960, REG_U16},
// [Load Patch 1003]17: REG_BURST=0xdeb0, 0x790f, 0x090d, 0x0133, 0xad0c, 0xd904, 0xad2c, 0x79ec, 0x2941, 0x7402, 0x71cf, 0xff00, 0x2184, 0xb142, 0x1906, 0x0e44, 0xffde, 0x70c9, 0x0a5a, 0x05a0, 0x8d2c, 0xad0b, 0xd800, 0xad01, 0x0219
{0xDEB0, 0x790F, REG_U16},
{0xDEB2, 0x090D, REG_U16},
{0xDEB4, 0x0133, REG_U16},
{0xDEB6, 0xAD0C, REG_U16},
{0xDEB8, 0xD904, REG_U16},
{0xDEBA, 0xAD2C, REG_U16},
{0xDEBC, 0x79EC, REG_U16},
{0xDEBE, 0x2941, REG_U16},
{0xDEC0, 0x7402, REG_U16},
{0xDEC2, 0x71CF, REG_U16},
{0xDEC4, 0xFF00, REG_U16},
{0xDEC6, 0x2184, REG_U16},
{0xDEC8, 0xB142, REG_U16},
{0xDECA, 0x1906, REG_U16},
{0xDECC, 0x0E44, REG_U16},
{0xDECE, 0xFFDE, REG_U16},
{0xDED0, 0x70C9, REG_U16},
{0xDED2, 0x0A5A, REG_U16},
{0xDED4, 0x05A0, REG_U16},
{0xDED6, 0x8D2C, REG_U16},
{0xDED8, 0xAD0B, REG_U16},
{0xDEDA, 0xD800, REG_U16},
{0xDEDC, 0xAD01, REG_U16},
{0xDEDE, 0x0219, REG_U16},
// [Load Patch 1003]18: REG_BURST=0xdee0, 0x05a0, 0xa513, 0xc0f1, 0x71cf, 0xffff, 0xc644, 0xa91b, 0xd902, 0x70cf, 0xffff, 0xc84c, 0x093e, 0x03a0, 0xa826, 0xffdc, 0xf1b5, 0xc0f1, 0x09ea, 0x0580, 0x75cf, 0xffff, 0xe058, 0x1540, 0x1080
{0xDEE0, 0x05A0, REG_U16},
{0xDEE2, 0xA513, REG_U16},
{0xDEE4, 0xC0F1, REG_U16},
{0xDEE6, 0x71CF, REG_U16},
{0xDEE8, 0xFFFF, REG_U16},
{0xDEEA, 0xC644, REG_U16},
{0xDEEC, 0xA91B, REG_U16},
{0xDEEE, 0xD902, REG_U16},
{0xDEF0, 0x70CF, REG_U16},
{0xDEF2, 0xFFFF, REG_U16},
{0xDEF4, 0xC84C, REG_U16},
{0xDEF6, 0x093E, REG_U16},
{0xDEF8, 0x03A0, REG_U16},
{0xDEFA, 0xA826, REG_U16},
{0xDEFC, 0xFFDC, REG_U16},
{0xDEFE, 0xF1B5, REG_U16},
{0xDF00, 0xC0F1, REG_U16},
{0xDF02, 0x09EA, REG_U16},
{0xDF04, 0x0580, REG_U16},
{0xDF06, 0x75CF, REG_U16},
{0xDF08, 0xFFFF, REG_U16},
{0xDF0A, 0xE058, REG_U16},
{0xDF0C, 0x1540, REG_U16},
{0xDF0E, 0x1080, REG_U16},
// [Load Patch 1003]19: REG_BURST=0xdf10, 0x08a7, 0x0010, 0x8d00, 0x0813, 0x009e, 0x1540, 0x1081, 0xe181, 0x20ca, 0x00a1, 0xf24b, 0x1540, 0x1081, 0x090f, 0x0050, 0x1540, 0x1081, 0x0927, 0x0091, 0x1550, 0x1081, 0xde00, 0xad2a, 0x1d50
{0xDF10, 0x08A7, REG_U16},
{0xDF12, 0x0010, REG_U16},
{0xDF14, 0x8D00, REG_U16},
{0xDF16, 0x0813, REG_U16},
{0xDF18, 0x009E, REG_U16},
{0xDF1A, 0x1540, REG_U16},
{0xDF1C, 0x1081, REG_U16},
{0xDF1E, 0xE181, REG_U16},
{0xDF20, 0x20CA, REG_U16},
{0xDF22, 0x00A1, REG_U16},
{0xDF24, 0xF24B, REG_U16},
{0xDF26, 0x1540, REG_U16},
{0xDF28, 0x1081, REG_U16},
{0xDF2A, 0x090F, REG_U16},
{0xDF2C, 0x0050, REG_U16},
{0xDF2E, 0x1540, REG_U16},
{0xDF30, 0x1081, REG_U16},
{0xDF32, 0x0927, REG_U16},
{0xDF34, 0x0091, REG_U16},
{0xDF36, 0x1550, REG_U16},
{0xDF38, 0x1081, REG_U16},
{0xDF3A, 0xDE00, REG_U16},
{0xDF3C, 0xAD2A, REG_U16},
{0xDF3E, 0x1D50, REG_U16},
// [Load Patch 1003]20: REG_BURST=0xdf40, 0x1382, 0x1552, 0x1101, 0x1d52, 0x1384, 0xb524, 0x082d, 0x015f, 0xff55, 0xd803, 0xf033, 0x1540, 0x1081, 0x0967, 0x00d1, 0x1550, 0x1081, 0xde00, 0xad2a, 0x1d50, 0x1382, 0x1552, 0x1101, 0x1d52
{0xDF40, 0x1382, REG_U16},
{0xDF42, 0x1552, REG_U16},
{0xDF44, 0x1101, REG_U16},
{0xDF46, 0x1D52, REG_U16},
{0xDF48, 0x1384, REG_U16},
{0xDF4A, 0xB524, REG_U16},
{0xDF4C, 0x082D, REG_U16},
{0xDF4E, 0x015F, REG_U16},
{0xDF50, 0xFF55, REG_U16},
{0xDF52, 0xD803, REG_U16},
{0xDF54, 0xF033, REG_U16},
{0xDF56, 0x1540, REG_U16},
{0xDF58, 0x1081, REG_U16},
{0xDF5A, 0x0967, REG_U16},
{0xDF5C, 0x00D1, REG_U16},
{0xDF5E, 0x1550, REG_U16},
{0xDF60, 0x1081, REG_U16},
{0xDF62, 0xDE00, REG_U16},
{0xDF64, 0xAD2A, REG_U16},
{0xDF66, 0x1D50, REG_U16},
{0xDF68, 0x1382, REG_U16},
{0xDF6A, 0x1552, REG_U16},
{0xDF6C, 0x1101, REG_U16},
{0xDF6E, 0x1D52, REG_U16},
// [Load Patch 1003]21: REG_BURST=0xdf70, 0x1384, 0xb524, 0x0811, 0x019e, 0xb8a0, 0xad00, 0xff47, 0x1d40, 0x1382, 0xf01f, 0xff5a, 0x8d01, 0x8d40, 0xe812, 0x71cf, 0xffff, 0xc644, 0x893b, 0x7030, 0x22d1, 0x8062, 0xf20a, 0x0a0f, 0x009e
{0xDF70, 0x1384, REG_U16},
{0xDF72, 0xB524, REG_U16},
{0xDF74, 0x0811, REG_U16},
{0xDF76, 0x019E, REG_U16},
{0xDF78, 0xB8A0, REG_U16},
{0xDF7A, 0xAD00, REG_U16},
{0xDF7C, 0xFF47, REG_U16},
{0xDF7E, 0x1D40, REG_U16},
{0xDF80, 0x1382, REG_U16},
{0xDF82, 0xF01F, REG_U16},
{0xDF84, 0xFF5A, REG_U16},
{0xDF86, 0x8D01, REG_U16},
{0xDF88, 0x8D40, REG_U16},
{0xDF8A, 0xE812, REG_U16},
{0xDF8C, 0x71CF, REG_U16},
{0xDF8E, 0xFFFF, REG_U16},
{0xDF90, 0xC644, REG_U16},
{0xDF92, 0x893B, REG_U16},
{0xDF94, 0x7030, REG_U16},
{0xDF96, 0x22D1, REG_U16},
{0xDF98, 0x8062, REG_U16},
{0xDF9A, 0xF20A, REG_U16},
{0xDF9C, 0x0A0F, REG_U16},
{0xDF9E, 0x009E, REG_U16},
// [Load Patch 1003]22: REG_BURST=0xdfa0, 0x71cf, 0xffff, 0xc84c, 0x893b, 0xe902, 0xffcf, 0x8d00, 0xb8e7, 0x26ca, 0x1022, 0xf5e2, 0xff3c, 0xd801, 0x1d40, 0x1002, 0x0141, 0x0580, 0x78e0, 0xc0f1, 0xc5e1, 0xff34, 0xdd00, 0x70cf, 0xffff
{0xDFA0, 0x71CF, REG_U16},
{0xDFA2, 0xFFFF, REG_U16},
{0xDFA4, 0xC84C, REG_U16},
{0xDFA6, 0x893B, REG_U16},
{0xDFA8, 0xE902, REG_U16},
{0xDFAA, 0xFFCF, REG_U16},
{0xDFAC, 0x8D00, REG_U16},
{0xDFAE, 0xB8E7, REG_U16},
{0xDFB0, 0x26CA, REG_U16},
{0xDFB2, 0x1022, REG_U16},
{0xDFB4, 0xF5E2, REG_U16},
{0xDFB6, 0xFF3C, REG_U16},
{0xDFB8, 0xD801, REG_U16},
{0xDFBA, 0x1D40, REG_U16},
{0xDFBC, 0x1002, REG_U16},
{0xDFBE, 0x0141, REG_U16},
{0xDFC0, 0x0580, REG_U16},
{0xDFC2, 0x78E0, REG_U16},
{0xDFC4, 0xC0F1, REG_U16},
{0xDFC6, 0xC5E1, REG_U16},
{0xDFC8, 0xFF34, REG_U16},
{0xDFCA, 0xDD00, REG_U16},
{0xDFCC, 0x70CF, REG_U16},
{0xDFCE, 0xFFFF, REG_U16},
// [Load Patch 1003]23: REG_BURST=0xdfd0, 0xe090, 0xa8a8, 0xd800, 0xb893, 0x0c8a, 0x0460, 0xd901, 0x71cf, 0xffff, 0xdc10, 0xd813, 0x0b96, 0x0460, 0x72a9, 0x0119, 0x0580, 0xc0f1, 0x71cf, 0x0000, 0x5bae, 0x7940, 0xff9d, 0xf135, 0x78e0
{0xDFD0, 0xE090, REG_U16},
{0xDFD2, 0xA8A8, REG_U16},
{0xDFD4, 0xD800, REG_U16},
{0xDFD6, 0xB893, REG_U16},
{0xDFD8, 0x0C8A, REG_U16},
{0xDFDA, 0x0460, REG_U16},
{0xDFDC, 0xD901, REG_U16},
{0xDFDE, 0x71CF, REG_U16},
{0xDFE0, 0xFFFF, REG_U16},
{0xDFE2, 0xDC10, REG_U16},
{0xDFE4, 0xD813, REG_U16},
{0xDFE6, 0x0B96, REG_U16},
{0xDFE8, 0x0460, REG_U16},
{0xDFEA, 0x72A9, REG_U16},
{0xDFEC, 0x0119, REG_U16},
{0xDFEE, 0x0580, REG_U16},
{0xDFF0, 0xC0F1, REG_U16},
{0xDFF2, 0x71CF, REG_U16},
{0xDFF4, 0x0000, REG_U16},
{0xDFF6, 0x5BAE, REG_U16},
{0xDFF8, 0x7940, REG_U16},
{0xDFFA, 0xFF9D, REG_U16},
{0xDFFC, 0xF135, REG_U16},
{0xDFFE, 0x78E0, REG_U16},
// [Load Patch 1003]24: REG_BURST=0xe000, 0xc0f1, 0x70cf, 0x0000, 0x5cba, 0x7840, 0x70cf, 0xffff, 0xe058, 0x8800, 0x0815, 0x001e, 0x70cf, 0xffff, 0xc84c, 0x881a, 0xe080, 0x0ee0, 0xffc1, 0xf121, 0x78e0, 0xc0f1, 0xd900, 0xf009, 0x70cf
{0xE000, 0xC0F1, REG_U16},
{0xE002, 0x70CF, REG_U16},
{0xE004, 0x0000, REG_U16},
{0xE006, 0x5CBA, REG_U16},
{0xE008, 0x7840, REG_U16},
{0xE00A, 0x70CF, REG_U16},
{0xE00C, 0xFFFF, REG_U16},
{0xE00E, 0xE058, REG_U16},
{0xE010, 0x8800, REG_U16},
{0xE012, 0x0815, REG_U16},
{0xE014, 0x001E, REG_U16},
{0xE016, 0x70CF, REG_U16},
{0xE018, 0xFFFF, REG_U16},
{0xE01A, 0xC84C, REG_U16},
{0xE01C, 0x881A, REG_U16},
{0xE01E, 0xE080, REG_U16},
{0xE020, 0x0EE0, REG_U16},
{0xE022, 0xFFC1, REG_U16},
{0xE024, 0xF121, REG_U16},
{0xE026, 0x78E0, REG_U16},
{0xE028, 0xC0F1, REG_U16},
{0xE02A, 0xD900, REG_U16},
{0xE02C, 0xF009, REG_U16},
{0xE02E, 0x70CF, REG_U16},
// [Load Patch 1003]25: REG_BURST=0xe030, 0xffff, 0xe0ac, 0x7835, 0x8041, 0x8000, 0xe102, 0xa040, 0x09f3, 0x8114, 0x71cf, 0xffff, 0xe058, 0x70cf, 0xffff, 0xc594, 0xb030, 0xffdd, 0xd800, 0xf109, 0x0000, 0x0300, 0x0204, 0x0700, 0x0000
{0xE030, 0xFFFF, REG_U16},
{0xE032, 0xE0AC, REG_U16},
{0xE034, 0x7835, REG_U16},
{0xE036, 0x8041, REG_U16},
{0xE038, 0x8000, REG_U16},
{0xE03A, 0xE102, REG_U16},
{0xE03C, 0xA040, REG_U16},
{0xE03E, 0x09F3, REG_U16},
{0xE040, 0x8114, REG_U16},
{0xE042, 0x71CF, REG_U16},
{0xE044, 0xFFFF, REG_U16},
{0xE046, 0xE058, REG_U16},
{0xE048, 0x70CF, REG_U16},
{0xE04A, 0xFFFF, REG_U16},
{0xE04C, 0xC594, REG_U16},
{0xE04E, 0xB030, REG_U16},
{0xE050, 0xFFDD, REG_U16},
{0xE052, 0xD800, REG_U16},
{0xE054, 0xF109, REG_U16},
{0xE056, 0x0000, REG_U16},
{0xE058, 0x0300, REG_U16},
{0xE05A, 0x0204, REG_U16},
{0xE05C, 0x0700, REG_U16},
{0xE05E, 0x0000, REG_U16},
// [Load Patch 1003]26: REG_BURST=0xe060, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
{0xE060, 0x0000, REG_U16},
{0xE062, 0x0000, REG_U16},
{0xE064, 0x0000, REG_U16},
{0xE066, 0x0000, REG_U16},
{0xE068, 0x0000, REG_U16},
{0xE06A, 0x0000, REG_U16},
{0xE06C, 0x0000, REG_U16},
{0xE06E, 0x0000, REG_U16},
{0xE070, 0x0000, REG_U16},
{0xE072, 0x0000, REG_U16},
{0xE074, 0x0000, REG_U16},
{0xE076, 0x0000, REG_U16},
{0xE078, 0x0000, REG_U16},
{0xE07A, 0x0000, REG_U16},
{0xE07C, 0x0000, REG_U16},
{0xE07E, 0x0000, REG_U16},
{0xE080, 0x0000, REG_U16},
{0xE082, 0x0000, REG_U16},
{0xE084, 0x0000, REG_U16},
{0xE086, 0x0000, REG_U16},
{0xE088, 0x0000, REG_U16},
{0xE08A, 0x0000, REG_U16},
{0xE08C, 0x0000, REG_U16},
{0xE08E, 0x0000, REG_U16},
// [Load Patch 1003]27: REG_BURST=0xe090, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xcb68, 0xffff, 0xdff0, 0xffff, 0xcb6c, 0xffff, 0xe000
{0xE090, 0x0000, REG_U16},
{0xE092, 0x0000, REG_U16},
{0xE094, 0x0000, REG_U16},
{0xE096, 0x0000, REG_U16},
{0xE098, 0x0000, REG_U16},
{0xE09A, 0x0000, REG_U16},
{0xE09C, 0x0000, REG_U16},
{0xE09E, 0x0000, REG_U16},
{0xE0A0, 0x0000, REG_U16},
{0xE0A2, 0x0000, REG_U16},
{0xE0A4, 0x0000, REG_U16},
{0xE0A6, 0x0000, REG_U16},
{0xE0A8, 0x0000, REG_U16},
{0xE0AA, 0x0000, REG_U16},
{0xE0AC, 0xFFFF, REG_U16},
{0xE0AE, 0xCB68, REG_U16},
{0xE0B0, 0xFFFF, REG_U16},
{0xE0B2, 0xDFF0, REG_U16},
{0xE0B4, 0xFFFF, REG_U16},
{0xE0B6, 0xCB6C, REG_U16},
{0xE0B8, 0xFFFF, REG_U16},
{0xE0BA, 0xE000, REG_U16},
// [Load Patch 1003]28: FIELD_WR=LOGICAL_ADDRESS_ACCESS, 0x0000
{0x098E, 0x0000, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS
// [Patch 1003; FEATURE RECOMMENDED ; Flicker Detect Patch]2: Load=Apply Patch 1003
// [Apply Patch 1003]1: FIELD_WR=PATCHLDR_LOADER_ADDRESS, 0x1028
{0xE000, 0x1028, REG_U16}, 	// PATCHLDR_LOADER_ADDRESS
// [Apply Patch 1003]2: FIELD_WR=PATCHLDR_PATCH_ID, 0x1003
{0xE002, 0x1003, REG_U16}, 	// PATCHLDR_PATCH_ID
// [Apply Patch 1003]3: FIELD_WR=PATCHLDR_FIRMWARE_ID, 0x41030202
{0xE004, 0x41030202, REG_U32}, 	// PATCHLDR_FIRMWARE_ID
// [Apply Patch 1003]4: FIELD_WR=COMMAND_REGISTER, HOST_COMMAND_OK, 1
{0x0080, 0xFFF0, REG_U16}, 	// COMMAND_REGISTER
// [Apply Patch 1003]5: POLL_FIELD=COMMAND_REGISTER, HOST_COMMAND_0, !=0, DELAY=10, TIMEOUT=100
//  POLL  COMMAND_REGISTER::HOST_COMMAND_0 =>  0x00
//Check 0x0080[0]=0
{POLL_COMMAND_REGISTER, HOST_COMMAND_0, 0},
// [Apply Patch 1003]6: FIELD_WR=COMMAND_REGISTER, HOST_COMMAND_0, 1
{0x0080, 0xFFF1, REG_U16}, 	// COMMAND_REGISTER
// [Apply Patch 1003]7: POLL_FIELD=COMMAND_REGISTER, HOST_COMMAND_0, !=0, DELAY=10, TIMEOUT=100
//  POLL  COMMAND_REGISTER::HOST_COMMAND_0 =>  0x00
//Check 0x0080[0]=0
{POLL_COMMAND_REGISTER, HOST_COMMAND_0, 0},
// [Apply Patch 1003]8: ERROR_IF=COMMAND_REGISTER, HOST_COMMAND_OK, !=1, "Couldn't apply patch",
// [Apply Patch 1003]9: ERROR_IF=PATCHLDR_APPLY_STATUS, !=0, "Apply status non-zero",
//Delay=10
{SENSOR_WAIT_MS, 10, REG_U16},

//Step4-GOX_APGA_LSC_85_0315
// [APGA Settings 85% 2012/03/15 07:16:41]

{0x3640, 0x02F0, REG_U16}, 	//  P_G1_P0Q0
{0x3642, 0xA90B, REG_U16}, 	//  P_G1_P0Q1
{0x3644, 0x4CF0, REG_U16}, 	//  P_G1_P0Q2
{0x3646, 0x3BCD, REG_U16}, 	//  P_G1_P0Q3
{0x3648, 0x05B1, REG_U16}, 	//  P_G1_P0Q4
{0x364A, 0x0130, REG_U16}, 	//  P_R_P0Q0
{0x364C, 0x4FC3, REG_U16}, 	//  P_R_P0Q1
{0x364E, 0x1ED1, REG_U16}, 	//  P_R_P0Q2
{0x3650, 0x674E, REG_U16}, 	//  P_R_P0Q3
{0x3652, 0x32B1, REG_U16}, 	//  P_R_P0Q4
{0x3654, 0x0170, REG_U16}, 	//  P_B_P0Q0
{0x3656, 0x4669, REG_U16}, 	//  P_B_P0Q1
{0x3658, 0x2A70, REG_U16}, 	//  P_B_P0Q2
{0x365A, 0x2D8D, REG_U16}, 	//  P_B_P0Q3
{0x365C, 0x7F10, REG_U16}, 	//  P_B_P0Q4
{0x365E, 0x00D0, REG_U16}, 	//  P_G2_P0Q0
{0x3660, 0xD24B, REG_U16}, 	//  P_G2_P0Q1
{0x3662, 0x4FB0, REG_U16}, 	//  P_G2_P0Q2
{0x3664, 0x03EE, REG_U16}, 	//  P_G2_P0Q3
{0x3666, 0x5970, REG_U16}, 	//  P_G2_P0Q4
{0x3680, 0x880B, REG_U16}, 	//  P_G1_P1Q0
{0x3682, 0xA069, REG_U16}, 	//  P_G1_P1Q1
{0x3684, 0xBFCE, REG_U16}, 	//  P_G1_P1Q2
{0x3686, 0x7D8D, REG_U16}, 	//  P_G1_P1Q3
{0x3688, 0x4B30, REG_U16}, 	//  P_G1_P1Q4
{0x368A, 0x91CC, REG_U16}, 	//  P_R_P1Q0
{0x368C, 0x53C9, REG_U16}, 	//  P_R_P1Q1
{0x368E, 0xF72E, REG_U16}, 	//  P_R_P1Q2
{0x3690, 0x16CE, REG_U16}, 	//  P_R_P1Q3
{0x3692, 0x06D1, REG_U16}, 	//  P_R_P1Q4
{0x3694, 0x3A6A, REG_U16}, 	//  P_B_P1Q0
{0x3696, 0xAD2B, REG_U16}, 	//  P_B_P1Q1
{0x3698, 0xF30E, REG_U16}, 	//  P_B_P1Q2
{0x369A, 0x85AD, REG_U16}, 	//  P_B_P1Q3
{0x369C, 0x012E, REG_U16}, 	//  P_B_P1Q4
{0x369E, 0x1108, REG_U16}, 	//  P_G2_P1Q0
{0x36A0, 0xCA6B, REG_U16}, 	//  P_G2_P1Q1
{0x36A2, 0xE2EF, REG_U16}, 	//  P_G2_P1Q2
{0x36A4, 0x08CB, REG_U16}, 	//  P_G2_P1Q3
{0x36A6, 0x4DEF, REG_U16}, 	//  P_G2_P1Q4
{0x36C0, 0x6330, REG_U16}, 	//  P_G1_P2Q0
{0x36C2, 0x478A, REG_U16}, 	//  P_G1_P2Q1
{0x36C4, 0x0B93, REG_U16}, 	//  P_G1_P2Q2
{0x36C6, 0x50EF, REG_U16}, 	//  P_G1_P2Q3
{0x36C8, 0xD712, REG_U16}, 	//  P_G1_P2Q4
{0x36CA, 0x1BB1, REG_U16}, 	//  P_R_P2Q0
{0x36CC, 0x4FAE, REG_U16}, 	//  P_R_P2Q1
{0x36CE, 0x58B3, REG_U16}, 	//  P_R_P2Q2
{0x36D0, 0x0710, REG_U16}, 	//  P_R_P2Q3
{0x36D2, 0xDF13, REG_U16}, 	//  P_R_P2Q4
{0x36D4, 0x2ED0, REG_U16}, 	//  P_B_P2Q0
{0x36D6, 0x30EC, REG_U16}, 	//  P_B_P2Q1
{0x36D8, 0x0233, REG_U16}, 	//  P_B_P2Q2
{0x36DA, 0x2C30, REG_U16}, 	//  P_B_P2Q3
{0x36DC, 0x9C72, REG_U16}, 	//  P_B_P2Q4
{0x36DE, 0x60D0, REG_U16}, 	//  P_G2_P2Q0
{0x36E0, 0x10CC, REG_U16}, 	//  P_G2_P2Q1
{0x36E2, 0x06D3, REG_U16}, 	//  P_G2_P2Q2
{0x36E4, 0x0F0F, REG_U16}, 	//  P_G2_P2Q3
{0x36E6, 0xC972, REG_U16}, 	//  P_G2_P2Q4
{0x3700, 0xE3AD, REG_U16}, 	//  P_G1_P3Q0
{0x3702, 0x5EAC, REG_U16}, 	//  P_G1_P3Q1
{0x3704, 0x4311, REG_U16}, 	//  P_G1_P3Q2
{0x3706, 0x9CEF, REG_U16}, 	//  P_G1_P3Q3
{0x3708, 0x92F2, REG_U16}, 	//  P_G1_P3Q4
{0x370A, 0x9F2E, REG_U16}, 	//  P_R_P3Q0
{0x370C, 0x31ED, REG_U16}, 	//  P_R_P3Q1
{0x370E, 0x1DB2, REG_U16}, 	//  P_R_P3Q2
{0x3710, 0xEAAE, REG_U16}, 	//  P_R_P3Q3
{0x3712, 0x9C33, REG_U16}, 	//  P_R_P3Q4
{0x3714, 0x9429, REG_U16}, 	//  P_B_P3Q0
{0x3716, 0x49EE, REG_U16}, 	//  P_B_P3Q1
{0x3718, 0x48D0, REG_U16}, 	//  P_B_P3Q2
{0x371A, 0x7CAE, REG_U16}, 	//  P_B_P3Q3
{0x371C, 0xA5EC, REG_U16}, 	//  P_B_P3Q4
{0x371E, 0x8A8A, REG_U16}, 	//  P_G2_P3Q0
{0x3720, 0x34EE, REG_U16}, 	//  P_G2_P3Q1
{0x3722, 0x0C6F, REG_U16}, 	//  P_G2_P3Q2
{0x3724, 0xBF8D, REG_U16}, 	//  P_G2_P3Q3
{0x3726, 0x13B2, REG_U16}, 	//  P_G2_P3Q4
{0x3740, 0x4D90, REG_U16}, 	//  P_G1_P4Q0
{0x3742, 0x28F0, REG_U16}, 	//  P_G1_P4Q1
{0x3744, 0x7892, REG_U16}, 	//  P_G1_P4Q2
{0x3746, 0xA072, REG_U16}, 	//  P_G1_P4Q3
{0x3748, 0xE116, REG_U16}, 	//  P_G1_P4Q4
{0x374A, 0x7011, REG_U16}, 	//  P_R_P4Q0
{0x374C, 0x4BB0, REG_U16}, 	//  P_R_P4Q1
{0x374E, 0x26B3, REG_U16}, 	//  P_R_P4Q2
{0x3750, 0xB173, REG_U16}, 	//  P_R_P4Q3
{0x3752, 0xA1D7, REG_U16}, 	//  P_R_P4Q4
{0x3754, 0x1BF1, REG_U16}, 	//  P_B_P4Q0
{0x3756, 0x4790, REG_U16}, 	//  P_B_P4Q1
{0x3758, 0x1E73, REG_U16}, 	//  P_B_P4Q2
{0x375A, 0xF412, REG_U16}, 	//  P_B_P4Q3
{0x375C, 0xE6F6, REG_U16}, 	//  P_B_P4Q4
{0x375E, 0x5D50, REG_U16}, 	//  P_G2_P4Q0
{0x3760, 0x14D0, REG_U16}, 	//  P_G2_P4Q1
{0x3762, 0x6072, REG_U16}, 	//  P_G2_P4Q2
{0x3764, 0x8CF2, REG_U16}, 	//  P_G2_P4Q3
{0x3766, 0xD816, REG_U16}, 	//  P_G2_P4Q4
{0x3784, 0x0280, REG_U16}, 	//  CENTER_COLUMN
{0x3782, 0x01E0, REG_U16}, 	//  CENTER_ROW
{0x37C0, 0x1167, REG_U16}, 	//  P_GR_Q5
{0x37C2, 0xA368, REG_U16}, 	//  P_RD_Q5
{0x37C4, 0xF4C9, REG_U16}, 	//  P_BL_Q5
{0x37C6, 0x7881, REG_U16}, 	//  P_GB_Q5
{0x098E, 0x0000, REG_U16}, 	//  LOGICAL addressing
{0xC960, 0x0B22, REG_U16}, 	//  CAM_PGA_L_CONFIG_COLOUR_TEMP
{0xC962, 0x783D, REG_U16}, 	//  CAM_PGA_L_CONFIG_GREEN_RED_Q14
{0xC964, 0x6CC8, REG_U16}, 	//  CAM_PGA_L_CONFIG_RED_Q14
{0xC966, 0x75C8, REG_U16}, 	//  CAM_PGA_L_CONFIG_GREEN_BLUE_Q14
{0xC968, 0x7E80, REG_U16}, 	//  CAM_PGA_L_CONFIG_BLUE_Q14
{0xC96A, 0x1306, REG_U16}, 	//  CAM_PGA_M_CONFIG_COLOUR_TEMP
{0xC96C, 0x7E20, REG_U16}, 	//  CAM_PGA_M_CONFIG_GREEN_RED_Q14
{0xC96E, 0x836D, REG_U16}, 	//  CAM_PGA_M_CONFIG_RED_Q14
{0xC970, 0x7D2B, REG_U16}, 	//  CAM_PGA_M_CONFIG_GREEN_BLUE_Q14
{0xC972, 0x7FC2, REG_U16}, 	//  CAM_PGA_M_CONFIG_BLUE_Q14
{0xC974, 0x1964, REG_U16}, 	//  CAM_PGA_R_CONFIG_COLOUR_TEMP
{0xC976, 0x8024, REG_U16}, 	//  CAM_PGA_R_CONFIG_GREEN_RED_Q14
{0xC978, 0x7FAE, REG_U16}, 	//  CAM_PGA_R_CONFIG_RED_Q14
{0xC97A, 0x8001, REG_U16}, 	//  CAM_PGA_R_CONFIG_GREEN_BLUE_Q14
{0xC97C, 0x7F0B, REG_U16}, 	//  CAM_PGA_R_CONFIG_BLUE_Q14
{0xC95E, 0x0003, REG_U16}, 	//  CAM_PGA_PGA_CONTROL

////Step4 LSC_APGA
////[1040 _85%_M_APGA]
////[APGA Settings 85% 2012/05/31 08:03:49]
//
//{0x3640, 0x0350, REG_U16},	 //  P_G1_P0Q0                                                                 
//{0x3642, 0xB90A, REG_U16},	 //  P_G1_P0Q1                                                                 
//{0x3644, 0x31D0, REG_U16},	 //  P_G1_P0Q2                                                                 
//{0x3646, 0x000E, REG_U16},	 //  P_G1_P0Q3                                                                 
//{0x3648, 0x1890, REG_U16},	 //  P_G1_P0Q4                                                                 
//{0x364A, 0x00B0, REG_U16},	 //  P_R_P0Q0                                                                  
//{0x364C, 0x0C89, REG_U16},	 //  P_R_P0Q1                                                                  
//{0x364E, 0x0271, REG_U16},	 //  P_R_P0Q2                                                                  
//{0x3650, 0x6FAD, REG_U16},	 //  P_R_P0Q3                                                                  
//{0x3652, 0x016F, REG_U16},	 //  P_R_P0Q4                                                                  
//{0x3654, 0x0150, REG_U16},	 //  P_B_P0Q0                                                                  
//{0x3656, 0x248B, REG_U16},	 //  P_B_P0Q1                                                                  
//{0x3658, 0x10F0, REG_U16},	 //  P_B_P0Q2                                                                  
//{0x365A, 0x544D, REG_U16},	 //  P_B_P0Q3                                                                  
//{0x365C, 0x2C2F, REG_U16},	 //  P_B_P0Q4                                                                  
//{0x365E, 0x0190, REG_U16},	 //  P_G2_P0Q0                                                                 
//{0x3660, 0x84AB, REG_U16},	 //  P_G2_P0Q1                                                                 
//{0x3662, 0x37B0, REG_U16},	 //  P_G2_P0Q2                                                                 
//{0x3664, 0x6F2D, REG_U16},	 //  P_G2_P0Q3                                                                 
//{0x3666, 0x1410, REG_U16},	 //  P_G2_P0Q4                                                                 
//{0x3680, 0x3AAB, REG_U16},	 //  P_G1_P1Q0                                                                 
//{0x3682, 0x6868, REG_U16},	 //  P_G1_P1Q1                                                                 
//{0x3684, 0x2E2A, REG_U16},	 //  P_G1_P1Q2                                                                 
//{0x3686, 0x4AEE, REG_U16},	 //  P_G1_P1Q3                                                                 
//{0x3688, 0x4D4F, REG_U16},	 //  P_G1_P1Q4                                                                 
//{0x368A, 0x1B6A, REG_U16},	 //  P_R_P1Q0                                                                  
//{0x368C, 0x068C, REG_U16},	 //  P_R_P1Q1                                                                  
//{0x368E, 0x668D, REG_U16},	 //  P_R_P1Q2                                                                  
//{0x3690, 0x244C, REG_U16},	 //  P_R_P1Q3                                                                  
//{0x3692, 0xC80E, REG_U16},	 //  P_R_P1Q4                                                                  
//{0x3694, 0x126C, REG_U16},	 //  P_B_P1Q0                                                                  
//{0x3696, 0xD6CB, REG_U16},	 //  P_B_P1Q1                                                                  
//{0x3698, 0x97CC, REG_U16},	 //  P_B_P1Q2                                                                  
//{0x369A, 0x580C, REG_U16},	 //  P_B_P1Q3                                                                  
//{0x369C, 0xE14E, REG_U16},	 //  P_B_P1Q4                                                                  
//{0x369E, 0x3B0C, REG_U16},	 //  P_G2_P1Q0                                                                 
//{0x36A0, 0x7DA8, REG_U16},	 //  P_G2_P1Q1                                                                 
//{0x36A2, 0xC92E, REG_U16},	 //  P_G2_P1Q2                                                                 
//{0x36A4, 0x250E, REG_U16},	 //  P_G2_P1Q3                                                                 
//{0x36A6, 0x1370, REG_U16},	 //  P_G2_P1Q4                                                                 
//{0x36C0, 0x5FB0, REG_U16},	 //  P_G1_P2Q0                                                                 
//{0x36C2, 0x266F, REG_U16},	 //  P_G1_P2Q1                                                                 
//{0x36C4, 0x0671, REG_U16},	 //  P_G1_P2Q2                                                                 
//{0x36C6, 0xA3D0, REG_U16},	 //  P_G1_P2Q3                                                                 
//{0x36C8, 0x2D8F, REG_U16},	 //  P_G1_P2Q4                                                                 
//{0x36CA, 0x0471, REG_U16},	 //  P_R_P2Q0                                                                  
//{0x36CC, 0x446F, REG_U16},	 //  P_R_P2Q1                                                                  
//{0x36CE, 0x1C91, REG_U16},	 //  P_R_P2Q2                                                                  
//{0x36D0, 0xCF30, REG_U16},	 //  P_R_P2Q3                                                                  
//{0x36D2, 0x2990, REG_U16},	 //  P_R_P2Q4                                                                  
//{0x36D4, 0x1650, REG_U16},	 //  P_B_P2Q0                                                                  
//{0x36D6, 0x1B2F, REG_U16},	 //  P_B_P2Q1                                                                  
//{0x36D8, 0x09F0, REG_U16},	 //  P_B_P2Q2                                                                  
//{0x36DA, 0xA68F, REG_U16},	 //  P_B_P2Q3                                                                  
//{0x36DC, 0x2B12, REG_U16},	 //  P_B_P2Q4                                                                  
//{0x36DE, 0x5AB0, REG_U16},	 //  P_G2_P2Q0                                                                 
//{0x36E0, 0x148F, REG_U16},	 //  P_G2_P2Q1                                                                 
//{0x36E2, 0x1A91, REG_U16},	 //  P_G2_P2Q2                                                                 
//{0x36E4, 0xA150, REG_U16},	 //  P_G2_P2Q3                                                                 
//{0x36E6, 0x8DAF, REG_U16},	 //  P_G2_P2Q4                                                                 
//{0x3700, 0xB2ED, REG_U16},	 //  P_G1_P3Q0                                                                 
//{0x3702, 0x230E, REG_U16},	 //  P_G1_P3Q1                                                                 
//{0x3704, 0xD8C4, REG_U16},	 //  P_G1_P3Q2                                                                 
//{0x3706, 0xE970, REG_U16},	 //  P_G1_P3Q3                                                                 
//{0x3708, 0xA4D1, REG_U16},	 //  P_G1_P3Q4                                                                 
//{0x370A, 0x836D, REG_U16},	 //  P_R_P3Q0                                                                  
//{0x370C, 0x6B4B, REG_U16},	 //  P_R_P3Q1                                                                  
//{0x370E, 0x85AD, REG_U16},	 //  P_R_P3Q2                                                                  
//{0x3710, 0xD74E, REG_U16},	 //  P_R_P3Q3                                                                  
//{0x3712, 0x2C0F, REG_U16},	 //  P_R_P3Q4                                                                  
//{0x3714, 0xBBE9, REG_U16},	 //  P_B_P3Q0                                                                  
//{0x3716, 0x1A6E, REG_U16},	 //  P_B_P3Q1                                                                  
//{0x3718, 0x5D2A, REG_U16},	 //  P_B_P3Q2                                                                  
//{0x371A, 0xE98E, REG_U16},	 //  P_B_P3Q3                                                                  
//{0x371C, 0x0630, REG_U16},	 //  P_B_P3Q4                                                                  
//{0x371E, 0xF64C, REG_U16},	 //  P_G2_P3Q0                                                                 
//{0x3720, 0x21CD, REG_U16},	 //  P_G2_P3Q1                                                                 
//{0x3722, 0xCFAE, REG_U16},	 //  P_G2_P3Q2                                                                 
//{0x3724, 0x8DCF, REG_U16},	 //  P_G2_P3Q3                                                                 
//{0x3726, 0xEC2F, REG_U16},	 //  P_G2_P3Q4                                                                 
//{0x3740, 0x4E8B, REG_U16},	 //  P_G1_P4Q0                                                                 
//{0x3742, 0xA630, REG_U16},	 //  P_G1_P4Q1                                                                 
//{0x3744, 0x5193, REG_U16},	 //  P_G1_P4Q2                                                                 
//{0x3746, 0x85B1, REG_U16},	 //  P_G1_P4Q3                                                                 
//{0x3748, 0x9456, REG_U16},	 //  P_G1_P4Q4                                                                 
//{0x374A, 0x444F, REG_U16},	 //  P_R_P4Q0                                                                  
//{0x374C, 0x93B0, REG_U16},	 //  P_R_P4Q1                                                                  
//{0x374E, 0x3C93, REG_U16},	 //  P_R_P4Q2                                                                  
//{0x3750, 0x8972, REG_U16},	 //  P_R_P4Q3                                                                  
//{0x3752, 0xAFB6, REG_U16},	 //  P_R_P4Q4                                                                  
//{0x3754, 0x0050, REG_U16},	 //  P_B_P4Q0                                                                  
//{0x3756, 0xB60F, REG_U16},	 //  P_B_P4Q1                                                                  
//{0x3758, 0x6D13, REG_U16},	 //  P_B_P4Q2                                                                  
//{0x375A, 0xA8B2, REG_U16},	 //  P_B_P4Q3                                                                  
//{0x375C, 0xA196, REG_U16},	 //  P_B_P4Q4                                                                  
//{0x375E, 0x266D, REG_U16},	 //  P_G2_P4Q0                                                                 
//{0x3760, 0x8490, REG_U16},	 //  P_G2_P4Q1                                                                 
//{0x3762, 0x3273, REG_U16},	 //  P_G2_P4Q2                                                                 
//{0x3764, 0x95D1, REG_U16},	 //  P_G2_P4Q3                                                                 
//{0x3766, 0x88B6, REG_U16},	 //  P_G2_P4Q4                                                                 
//{0x3784, 0x0294, REG_U16},	 //  CENTER_COLUMN                                                             
//{0x3782, 0x01D8, REG_U16},	 //  CENTER_ROW                                                                
//{0x37C0, 0xF66A, REG_U16},	 //  P_GR_Q5                                                                   
//{0x37C2, 0xE7C9, REG_U16},	 //  P_RD_Q5                                                                   
//{0x37C4, 0xC28A, REG_U16},	 //  P_BL_Q5                                                                   
//{0x37C6, 0x98AB, REG_U16},	 //  P_GB_Q5                                                                   
//{0x098E, 0x0000, REG_U16},	 //  LOGICAL addressing                                                        
//{0xC960, 0x0AF0, REG_U16},	 //  CAM_PGA_L_CONFIG_COLOUR_TEMP                                              
//{0xC962, 0x7218, REG_U16},	 //  CAM_PGA_L_CONFIG_GREEN_RED_Q14                                            
//{0xC964, 0x4D70, REG_U16},	 //  CAM_PGA_L_CONFIG_RED_Q14                                                  
//{0xC966, 0x709C, REG_U16},	 //  CAM_PGA_L_CONFIG_GREEN_BLUE_Q14                                           
//{0xC968, 0x6F8C, REG_U16},	 //  CAM_PGA_L_CONFIG_BLUE_Q14                                                 
//{0xC96A, 0x0FA0, REG_U16},	 //  CAM_PGA_M_CONFIG_COLOUR_TEMP                                              
//{0xC96C, 0x7E13, REG_U16},	 //  CAM_PGA_M_CONFIG_GREEN_RED_Q14                                            
//{0xC96E, 0x7F18, REG_U16},	 //  CAM_PGA_M_CONFIG_RED_Q14                                                  
//{0xC970, 0x7D9E, REG_U16},	 //  CAM_PGA_M_CONFIG_GREEN_BLUE_Q14                                           
//{0xC972, 0x7E7B, REG_U16},	 //  CAM_PGA_M_CONFIG_BLUE_Q14                                                 
//{0xC974, 0x1964, REG_U16},	 //  CAM_PGA_R_CONFIG_COLOUR_TEMP                                              
//{0xC976, 0x8068, REG_U16},	 //  CAM_PGA_R_CONFIG_GREEN_RED_Q14                                            
//{0xC978, 0x719C, REG_U16},	 //  CAM_PGA_R_CONFIG_RED_Q14                                                  
//{0xC97A, 0x8183, REG_U16},	 //  CAM_PGA_R_CONFIG_GREEN_BLUE_Q14                                           
//{0xC97C, 0x7BB1, REG_U16},	 //  CAM_PGA_R_CONFIG_BLUE_Q14                                                 
//{0xC95E, 0x0003, REG_U16},	 //  CAM_PGA_PGA_CONTROL                                                       
//



//*Step5-GOX_CCM_AWB		//AWB & CCM
//[CCM]
{0xC892, 0x0235, REG_U16},	 //  CAM_AWB_CCM_L_0
{0xC894, 0xFF18, REG_U16},	 //  CAM_AWB_CCM_L_1
{0xC896, 0xFFB3, REG_U16},	 //  CAM_AWB_CCM_L_2
{0xC898, 0xFF80, REG_U16},	 //  CAM_AWB_CCM_L_3
{0xC89A, 0x0166, REG_U16},	 //  CAM_AWB_CCM_L_4
{0xC89C, 0x001A, REG_U16},	 //  CAM_AWB_CCM_L_5
{0xC89E, 0xFF9B, REG_U16},	 //  CAM_AWB_CCM_L_6
{0xC8A0, 0xFEB4, REG_U16},	 //  CAM_AWB_CCM_L_7
{0xC8A2, 0x02B1, REG_U16},	 //  CAM_AWB_CCM_L_8
{0xC8A4, 0x0223, REG_U16},	 //  CAM_AWB_CCM_M_0
{0xC8A6, 0xFEEA, REG_U16},	 //  CAM_AWB_CCM_M_1
{0xC8A8, 0xFFF3, REG_U16},	 //  CAM_AWB_CCM_M_2
{0xC8AA, 0xFF75, REG_U16},	 //  CAM_AWB_CCM_M_3
{0xC8AC, 0x0198, REG_U16},	 //  CAM_AWB_CCM_M_4
{0xC8AE, 0xFFF3, REG_U16},	 //  CAM_AWB_CCM_M_5
{0xC8B0, 0xFF9A, REG_U16},	 //  CAM_AWB_CCM_M_6
{0xC8B2, 0xFEE6, REG_U16},	 //  CAM_AWB_CCM_M_7
{0xC8B4, 0x0280, REG_U16},	 //  CAM_AWB_CCM_M_8
{0xC8B6, 0x01E7, REG_U16},	 //  CAM_AWB_CCM_R_0
{0xC8B8, 0xFF26, REG_U16},	 //  CAM_AWB_CCM_R_1
{0xC8BA, 0xFFF3, REG_U16},	 //  CAM_AWB_CCM_R_2
{0xC8BC, 0xFFB4, REG_U16},	 //  CAM_AWB_CCM_R_3
{0xC8BE, 0x0164, REG_U16},	 //  CAM_AWB_CCM_R_4
{0xC8C0, 0xFFE8, REG_U16},	 //  CAM_AWB_CCM_R_5
{0xC8C2, 0xFFC1, REG_U16},	 //  CAM_AWB_CCM_R_6
{0xC8C4, 0xFEB4, REG_U16},	 //  CAM_AWB_CCM_R_7
{0xC8C6, 0x028B, REG_U16},	 //  CAM_AWB_CCM_R_8
{0xC8C8, 0x0075, REG_U16},	 //  CAM_AWB_CCM_L_RG_GAIN
{0xC8CA, 0x011C, REG_U16},	 //  CAM_AWB_CCM_L_BG_GAIN
{0xC8CC, 0x009A, REG_U16},	 //  CAM_AWB_CCM_M_RG_GAIN
{0xC8CE, 0x0105, REG_U16},	 //  CAM_AWB_CCM_M_BG_GAIN
{0xC8D0, 0x00A4, REG_U16},	 //  CAM_AWB_CCM_R_RG_GAIN
{0xC8D2, 0x00AC, REG_U16},	 //  CAM_AWB_CCM_R_BG_GAIN
{0xC8D4, 0x0A8C, REG_U16},	 //  CAM_AWB_CCM_L_CTEMP
{0xC8D6, 0x0F0A, REG_U16},	 //  CAM_AWB_CCM_M_CTEMP
{0xC8D8, 0x1964, REG_U16},	 //  CAM_AWB_CCM_R_CTEMP



//[AWB]
{0xC914, 0x0000, REG_U16},   // CAM_STAT_AWB_CLIP_WINDOW_XSTART
{0xC916, 0x0000, REG_U16},   // CAM_STAT_AWB_CLIP_WINDOW_YSTART
{0xC918, 0x04FF, REG_U16},   // CAM_STAT_AWB_CLIP_WINDOW_XEND
{0xC91A, 0x02CF, REG_U16},   // CAM_STAT_AWB_CLIP_WINDOW_YEND
{0xC904, 0x0033, REG_U16},   // CAM_AWB_AWB_XSHIFT_PRE_ADJ
{0xC906, 0x0040, REG_U16},   // CAM_AWB_AWB_YSHIFT_PRE_ADJ
{0xC8F2, 0x03,	 REG_U8},    // CAM_AWB_AWB_XSCALE
{0xC8F3, 0x02,	 REG_U8},    // CAM_AWB_AWB_YSCALE
{0xC906, 0x003C, REG_U16},   // CAM_AWB_AWB_YSHIFT_PRE_ADJ
{0xC8F4, 0x0000, REG_U16},   // CAM_AWB_AWB_WEIGHTS_0
{0xC8F6, 0x0000, REG_U16},   // CAM_AWB_AWB_WEIGHTS_1
{0xC8F8, 0x0000, REG_U16},   // CAM_AWB_AWB_WEIGHTS_2
{0xC8FA, 0xE724, REG_U16},   // CAM_AWB_AWB_WEIGHTS_3
{0xC8FC, 0x1583, REG_U16},   // CAM_AWB_AWB_WEIGHTS_4
{0xC8FE, 0x2045, REG_U16},   // CAM_AWB_AWB_WEIGHTS_5
{0xC900, 0x03FF, REG_U16},   // CAM_AWB_AWB_WEIGHTS_6
{0xC902, 0x007C, REG_U16},   // CAM_AWB_AWB_WEIGHTS_7
//{0xC90C, 0x80,	 REG_U8},    // CAM_AWB_K_R_L
//{0xC90D, 0x80,	 REG_U8},    // CAM_AWB_K_G_L
//{0xC90E, 0x80,	 REG_U8},    // CAM_AWB_K_B_L
{0xC90C, 0x2D,	 REG_U8},    // CAM_AWB_K_R_L
{0xC90D, 0x46,	 REG_U8},    // CAM_AWB_K_G_L
{0xC90E, 0x90,	 REG_U8},    // CAM_AWB_K_B_L
{0xC90F, 0x88,	 REG_U8},    // CAM_AWB_K_R_R
{0xC910, 0x80,	 REG_U8},    // CAM_AWB_K_G_R
{0xC911, 0x80,	 REG_U8},            // CAM_AWB_K_B_R


//[0614_awb_WITH COVER glass]
//{0x098E, 0x490A, REG_U16},   // CAM_AWB_AWB_WEIGHTS_6
//{0xC90A, 0x17AA, REG_U16},   // CAM_AWB_AWB_WEIGHTS_7
//{0xC90C, 0x80,	 REG_U8},    // CAM_AWB_K_R_L
//{0xC90D, 0x80,	 REG_U8},    // CAM_AWB_K_G_L
//{0xC90E, 0xD2,	 REG_U8},    // CAM_AWB_K_B_L
//{0xC90F, 0x88,	 REG_U8},    // CAM_AWB_K_R_R
//{0xC910, 0x80,	 REG_U8},    // CAM_AWB_K_G_R
//{0xC911, 0x80,	 REG_U8},            // CAM_AWB_K_B_R
////
////{0xC90A, 0x1136, REG_U16},	// CAM_AWB_TINTS_CTEMP_THRESHOLD
////{0xC90C, 0x01,	 REG_U8}, 	// CAM_AWB_K_R_L
////{0xC90D, 0x3E,	 REG_U8}, 	// CAM_AWB_K_G_L
////{0xC90E, 0xFF,	 REG_U8}, 	// CAM_AWB_K_B_L
////{0xC90F, 0x8C,	 REG_U8}, 	// CAM_AWB_K_R_R
////{0xC910, 0x88,	 REG_U8}, 	// CAM_AWB_K_G_R
////{0xC911, 0x86,	 REG_U8}, 	// CAM_AWB_K_B_R
////
//{0xC904, 0x003F, REG_U16},   // CAM_AWB_AWB_WEIGHTS_6
//{0xC906, 0x003D, REG_U16},   // CAM_AWB_AWB_WEIGHTS_7
////
////0614-2
//{0x098E, 0x4904, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS [CAM_AWB_AWB_XSHIFT_PRE_ADJ]
//{0xC904, 0x003F, REG_U16}, 	// CAM_AWB_AWB_XSHIFT_PRE_ADJ
//{0xC906, 0x003E, REG_U16}, 	// CAM_AWB_AWB_YSHIFT_PRE_ADJ
////{0xC90A, 0x1200, REG_U16},	// CAM_AWB_TINTS_CTEMP_THRESHOLD
//{0xC90A, 0x135C, REG_U16},	// CAM_AWB_TINTS_CTEMP_THRESHOLD
////{0xC90A, 0x13C0, REG_U16},	// CAM_AWB_TINTS_CTEMP_THRESHOLD
////{0xC90A, 0x1360, REG_U16},	// CAM_AWB_TINTS_CTEMP_THRESHOLD
////{0xC90A, 0x1364, REG_U16},	// CAM_AWB_TINTS_CTEMP_THRESHOLD
//{0xC90C, 0x2D,	 REG_U8}, 	// CAM_AWB_K_R_L
//{0xC90D, 0x46,	 REG_U8}, 	// CAM_AWB_K_G_L
////{0xC90E, 0x85,	 REG_U8}, 	// CAM_AWB_K_B_L
//{0xC90E, 0x80,	 REG_U8}, 	// CAM_AWB_K_B_L
//{0xC90F, 0x90,	 REG_U8}, 	// CAM_AWB_K_R_R
//{0xC910, 0x80,	 REG_U8}, 	// CAM_AWB_K_G_R
////{0xC911, 0x80,	 REG_U8}, 	// CAM_AWB_K_B_R
////{0xC911, 0x88,	 REG_U8}, 	// CAM_AWB_K_B_R
//{0xC911, 0x8C,	 REG_U8}, 	// CAM_AWB_K_B_R
////{0xC911, 0x8D,	 REG_U8}, 	// CAM_AWB_K_B_R

//SW4-L1-HL-Camera-AEAWBFineTune-00+{_20120221
    //[AE target]
{0x098E, 0xC87A, REG_U16},  // LOGICAL_ADDRESS_ACCESS [CAM_AET_TARGET_AVERAGE_LUMA]
{0xC87A, 0x3F,	 REG_U8},  // CAM_AET_TARGET_AVERAGE_LUMA
//{0xC87A, 0x35,	 REG_U8},  // CAM_AET_TARGET_AVERAGE_LUMA

//skip Step6

//*Step7-CPIPE_Preference	//Color Pipe preference settings, if any
{0x098E, 0x4926, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS [CAM_LL_START_BRIGHTNESS]
{0xC926, 0x0020, REG_U16}, 	// CAM_LL_START_BRIGHTNESS
{0xC928, 0x009A, REG_U16}, 	// CAM_LL_STOP_BRIGHTNESS
{0xC946, 0x0070, REG_U16}, 	// CAM_LL_START_GAIN_METRIC
{0xC948, 0x00F3, REG_U16}, 	// CAM_LL_STOP_GAIN_METRIC
{0xC952, 0x0020, REG_U16}, 	// CAM_LL_START_TARGET_LUMA_BM
{0xC954, 0x009A, REG_U16}, 	// CAM_LL_STOP_TARGET_LUMA_BM
{0xC92A, 0x80,	 REG_U8}, 	// CAM_LL_START_SATURATION
{0xC92B, 0x4B,	 REG_U8}, 	// CAM_LL_END_SATURATION
{0xC92C, 0x00,	 REG_U8}, 	// CAM_LL_START_DESATURATION
{0xC92D, 0xFF,	 REG_U8}, 	// CAM_LL_END_DESATURATION
{0xC92E, 0x3C,	 REG_U8}, 	// CAM_LL_START_DEMOSAIC
{0xC92F, 0x02,	 REG_U8}, 	// CAM_LL_START_AP_GAIN
{0xC930, 0x06,	 REG_U8}, 	// CAM_LL_START_AP_THRESH
{0xC931, 0x64,	 REG_U8}, 	// CAM_LL_STOP_DEMOSAIC
{0xC932, 0x01,	 REG_U8}, 	// CAM_LL_STOP_AP_GAIN
{0xC933, 0x0C,	 REG_U8}, 	// CAM_LL_STOP_AP_THRESH
{0xC934, 0x3C,	 REG_U8}, 	// CAM_LL_START_NR_RED
{0xC935, 0x3C,	 REG_U8}, 	// CAM_LL_START_NR_GREEN
{0xC936, 0x3C,	 REG_U8}, 	// CAM_LL_START_NR_BLUE
{0xC937, 0x0F,	 REG_U8}, 	// CAM_LL_START_NR_THRESH
{0xC938, 0x64,	 REG_U8}, 	// CAM_LL_STOP_NR_RED
{0xC939, 0x64,	 REG_U8}, 	// CAM_LL_STOP_NR_GREEN
{0xC93A, 0x64,	 REG_U8}, 	// CAM_LL_STOP_NR_BLUE
{0xC93B, 0x32,	 REG_U8}, 	// CAM_LL_STOP_NR_THRESH
{0xC93C, 0x0020, REG_U16}, 	// CAM_LL_START_CONTRAST_BM
{0xC93E, 0x009A, REG_U16}, 	// CAM_LL_STOP_CONTRAST_BM
{0xC940, 0x00DC, REG_U16}, 	// CAM_LL_GAMMA
{0xC942, 0x38,	 REG_U8}, 	// CAM_LL_START_CONTRAST_GRADIENT
{0xC943, 0x30,	 REG_U8}, 	// CAM_LL_STOP_CONTRAST_GRADIENT
{0xC944, 0x50,	 REG_U8}, 	// CAM_LL_START_CONTRAST_LUMA_PERCENTAGE
{0xC945, 0x19,	 REG_U8}, 	// CAM_LL_STOP_CONTRAST_LUMA_PERCENTAGE
{0xC94A, 0x0230, REG_U16}, 	// CAM_LL_START_FADE_TO_BLACK_LUMA
{0xC94C, 0x0010, REG_U16}, 	// CAM_LL_STOP_FADE_TO_BLACK_LUMA
{0xC94E, 0x01CD, REG_U16}, 	// CAM_LL_CLUSTER_DC_TH_BM
{0xC950, 0x05,	 REG_U8}, 	// CAM_LL_CLUSTER_DC_GATE_PERCENTAGE
{0xC951, 0x40,	 REG_U8}, 	// CAM_LL_SUMMING_SENSITIVITY_FACTOR
{0xC87B, 0x1B,	 REG_U8}, 	// CAM_AET_TARGET_AVERAGE_LUMA_DARK
{0xC878, 0x0E,	 REG_U8}, 	// CAM_AET_AEMODE
{0xC890, 0x0080, REG_U16}, 	// CAM_AET_TARGET_GAIN
{0xC886, 0x0100, REG_U16}, 	// CAM_AET_AE_MAX_VIRT_AGAIN
{0xC87C, 0x005A, REG_U16}, 	// CAM_AET_BLACK_CLIPPING_TARGET
{0xB42A, 0x05,	 REG_U8}, 	// CCM_DELTA_GAIN
{0xA80A, 0x20,	 REG_U8}, 	// AE_TRACK_AE_TRACKING_DAMPENING_SPEED



//*Step8-Features		//Ports, special features, etc.
{0x098E, 0x0000, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS
{0xC984, 0x8040, REG_U16}, 	// CAM_PORT_OUTPUT_CONTROL
{0x001E, 0x0777, REG_U16}, 	// PAD_SLEW
{0x098E, 0x0000, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS
{0xC984, 0x8041, REG_U16}, 	// CAM_PORT_OUTPUT_CONTROL
{0xC988, 0x0F00, REG_U16}, 	// CAM_PORT_MIPI_TIMING_T_HS_ZERO
{0xC98A, 0x0B07, REG_U16}, 	// CAM_PORT_MIPI_TIMING_T_HS_EXIT_HS_TRAIL
{0xC98C, 0x0D01, REG_U16}, 	// CAM_PORT_MIPI_TIMING_T_CLK_POST_CLK_PRE
{0xC98E, 0x071D, REG_U16}, 	// CAM_PORT_MIPI_TIMING_T_CLK_TRAIL_CLK_ZERO
{0xC990, 0x0006, REG_U16}, 	// CAM_PORT_MIPI_TIMING_T_LPX
{0xC992, 0x0A0C, REG_U16}, 	// CAM_PORT_MIPI_TIMING_INIT_TIMING
//{0x3C5A, 0x0009, REG_U16}, 	// MIPI_DELAY_TRIM
{0x3C5A, 0x000A, REG_U16}, 	// MIPI_DELAY_TRIM	//&*&*&*CJ_20120625:mod for camera mipi signals
{0xDC00, 0x40,	 REG_U8}, 	// SYSMGR_NEXT_STATE
{0x0080, 0x8002, REG_U16}, 	// COMMAND_REGISTER
//  POLL  COMMAND_REGISTER::HOST_COMMAND_1 =>  0x00
//Check 0x0080[1]=0
{POLL_COMMAND_REGISTER, HOST_COMMAND_1, 0},

{0xDC00, 0x34,	 REG_U8}, 	// SYSMGR_NEXT_STATE
{0x0080, 0x8002, REG_U16}, 	// COMMAND_REGISTER
//  POLL  COMMAND_REGISTER::HOST_COMMAND_1 =>  0x00
//Check 0x0080[1]=0
{POLL_COMMAND_REGISTER, HOST_COMMAND_1, 0},

//LOAD=Speed up AE/AWB
{0x098E, 0x2802, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS
{0xA802, 0x0008, REG_U16}, 	// AE_TRACK_MODE
{0xC908, 0x01,	 REG_U8}, 	// CAM_AWB_SKIP_FRAMES
{0xC879, 0x01,	 REG_U8}, 	// CAM_AET_SKIP_FRAMES
{0xC909, 0x02,	 REG_U8}, 	// CAM_AWB_AWBMODE
{0xA80A, 0x18,	 REG_U8}, 	// AE_TRACK_AE_TRACKING_DAMPENING_SPEED
{0xA80B, 0x18,	 REG_U8}, 	// AE_TRACK_AE_DAMPENING_SPEED
{0xAC16, 0x18,	 REG_U8}, 	// AWB_PRE_AWB_RATIOS_TRACKING_SPEED
{0xC878, 0x0E,	 REG_U8}, 	// CAM_AET_AEMODE

//[4.4 Saturation -1]
{0x098E, 0x4C12, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS [UVC_SATURATION_CONTROL]
//{0xCC12, 0x007B, REG_U16}, 	// UVC_SATURATION_CONTROL
{0xCC12, 0x0070, REG_U16}, 	// UVC_SATURATION_CONTROL


//[AE window , corner=0%]
//{0x098E, 0xA407, REG_U16},	// LOGICAL_ADDRESS_ACCESS [AE_RULE_AE_WEIGHT_TABLE_0_0]
{0x098E, 0x2404, REG_U16},	// LOGICAL_ADDRESS_ACCESS [AE_RULE_AE_WEIGHT_TABLE_0_0]
{0xA404, 0x0003, REG_U16},	
//{0xA407, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_0_0
//{0xA40C, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_1_0
//{0xA411, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_2_0
//{0xA416, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_3_0
//{0xA41B, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_4_0
//{0xA408, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_0_1
//{0xA409, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_0_2
//{0xA40A, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_0_3
//{0xA40B, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_0_4
//{0xA410, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_1_4
//{0xA415, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_2_4
//{0xA41A, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_3_4
//{0xA41F, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_4_4
//{0xA41E, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_4_3
//{0xA41D, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_4_2
//{0xA41C, 0x00, REG_U8}, 	// AE_RULE_AE_WEIGHT_TABLE_4_1

//Final-Change-Config
{0x098E, 0xDC00, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS [SYSMGR_NEXT_STATE]
{0xDC00, 0x28, REG_U8}, 	// SYSMGR_NEXT_STATE
{0x0080, 0x8002, REG_U16}, 	// COMMAND_REGISTER
//  POLL  COMMAND_REGISTER::HOST_COMMAND_1 =>  0x00
//Check 0x0080[1]=0
{POLL_COMMAND_REGISTER, HOST_COMMAND_1, 0},


// Resync FPS reporting
//DELAY= 20
{SENSOR_WAIT_MS, 20, REG_U16},
//STATE= Detect Master Clock, 1
	
{SENSOR_TABLE_END, 0x0000, REG_U16}
};


static struct sensor_reg size_640x480[] = {
	
//[1.2 VGA: fixed to 30FPS]
//[MT9M114_640x480_VGA_bin_MIPI_768_fixed_30fps_EXTCLK_24]
{0x098E, 0x1000, REG_U16},
{0xC800, 0x0004, REG_U16},		//cam_sensor_cfg_y_addr_start = 4
{0xC802, 0x0004, REG_U16},		//cam_sensor_cfg_x_addr_start = 4
{0xC804, 0x03CB, REG_U16},		//cam_sensor_cfg_y_addr_end = 971
{0xC806, 0x050B, REG_U16},		//cam_sensor_cfg_x_addr_end = 1291
{0xC808, 0x02DC6C00, REG_U32},		//cam_sensor_cfg_pixclk = 48000000
{0xC80C, 0x0001, REG_U16},		//cam_sensor_cfg_row_speed = 1
{0xC80E, 0x00DB, REG_U16},		//cam_sensor_cfg_fine_integ_time_min = 219
{0xC810, 0x05B3, REG_U16},		//cam_sensor_cfg_fine_integ_time_max = 1459
{0xC812, 0x03EE, REG_U16},		//cam_sensor_cfg_frame_length_lines = 1006
{0xC814, 0x0636, REG_U16},		//cam_sensor_cfg_line_length_pck = 1590
{0xC816, 0x0060, REG_U16},		//cam_sensor_cfg_fine_correction = 96
{0xC818, 0x03C3, REG_U16},		//cam_sensor_cfg_cpipe_last_row = 963
{0xC826, 0x0020, REG_U16},		//cam_sensor_cfg_reg_0_data = 32
{0xC834, 0x0003, REG_U16},		//cam_sensor_control_read_mode = 0
{0xC854, 0x0000, REG_U16},		//cam_crop_window_xoffset = 0
{0xC856, 0x0000, REG_U16},		//cam_crop_window_yoffset = 0
{0xC858, 0x0500, REG_U16},		//cam_crop_window_width = 1280
{0xC85A, 0x03C0, REG_U16},		//cam_crop_window_height = 960
{0xC85C, 0x03,	 REG_U8},		//cam_crop_cropmode = 3
{0xC868, 0x0280, REG_U16},		//cam_output_width = 640
{0xC86A, 0x01E0, REG_U16},		//cam_output_height = 480
{0xC878, 0x00,	 REG_U8},		//cam_aet_aemode = 0
{0xC88C, 0x1E02, REG_U16},		//cam_aet_max_frame_rate = 7682
{0xC88E, 0x1E02, REG_U16},		//cam_aet_min_frame_rate = 7680
{0xC914, 0x0000, REG_U16},		//cam_stat_awb_clip_window_xstart = 0
{0xC916, 0x0000, REG_U16},		//cam_stat_awb_clip_window_ystart = 0
{0xC918, 0x027F, REG_U16},		//cam_stat_awb_clip_window_xend = 639
{0xC91A, 0x01DF, REG_U16},		//cam_stat_awb_clip_window_yend = 479
{0xC91C, 0x0000, REG_U16},		//cam_stat_ae_initial_window_xstart = 0
{0xC91E, 0x0000, REG_U16},		//cam_stat_ae_initial_window_ystart = 0
{0xC920, 0x00FF, REG_U16},		//cam_stat_ae_initial_window_xend = 255
{0xC922, 0x00BF, REG_U16},		//cam_stat_ae_initial_window_yend = 191
{SENSOR_TABLE_END, 0x00}          
};     

static struct sensor_reg size_1280x960[] = {
//[MT9M114_1280x960_MIPI_768_fixed_30fps_EXTCLK_24]
{0x098E, 0x1000, REG_U16},
{0xC800, 0x0004, REG_U16},		//cam_sensor_cfg_y_addr_start = 4
{0xC802, 0x0004, REG_U16},		//cam_sensor_cfg_x_addr_start = 4
{0xC804, 0x03CB, REG_U16},		//cam_sensor_cfg_y_addr_end = 971
{0xC806, 0x050B, REG_U16},		//cam_sensor_cfg_x_addr_end = 1291
{0xC808, 0x02DC6C00, REG_U32},		//cam_sensor_cfg_pixclk = 48000000
{0xC80C, 0x0001, REG_U16},		//cam_sensor_cfg_row_speed = 1
{0xC80E, 0x00DB, REG_U16},		//cam_sensor_cfg_fine_integ_time_min = 219
{0xC810, 0x05B3, REG_U16},		//cam_sensor_cfg_fine_integ_time_max = 1459
{0xC812, 0x03EE, REG_U16},		//cam_sensor_cfg_frame_length_lines = 1006
{0xC814, 0x0636, REG_U16},		//cam_sensor_cfg_line_length_pck = 1590
{0xC816, 0x0060, REG_U16},		//cam_sensor_cfg_fine_correction = 96
{0xC818, 0x03C3, REG_U16},		//cam_sensor_cfg_cpipe_last_row = 963
{0xC826, 0x0020, REG_U16},		//cam_sensor_cfg_reg_0_data = 32
{0xC834, 0x0003, REG_U16},		//cam_sensor_control_read_mode = 0
{0xC854, 0x0000, REG_U16},		//cam_crop_window_xoffset = 0
{0xC856, 0x0000, REG_U16},		//cam_crop_window_yoffset = 0
{0xC858, 0x0500, REG_U16},		//cam_crop_window_width = 1280
{0xC85A, 0x03C0, REG_U16},		//cam_crop_window_height = 960
{0xC85C, 0x03,	 REG_U8},		//cam_crop_cropmode = 3
{0xC868, 0x0500, REG_U16},		//cam_output_width = 1280
{0xC86A, 0x03C0, REG_U16},		//cam_output_height = 960
{0xC878, 0x00,	 REG_U8},		//cam_aet_aemode = 0
{0xC88C, 0x1E02, REG_U16},		//cam_aet_max_frame_rate = 7682
{0xC88E, 0x1E02, REG_U16},		//cam_aet_min_frame_rate = 7682
{0xC914, 0x0000, REG_U16},		//cam_stat_awb_clip_window_xstart = 0
{0xC916, 0x0000, REG_U16},		//cam_stat_awb_clip_window_ystart = 0
{0xC918, 0x04FF, REG_U16},		//cam_stat_awb_clip_window_xend = 1279
{0xC91A, 0x03BF, REG_U16},		//cam_stat_awb_clip_window_yend = 959
{0xC91C, 0x0000, REG_U16},		//cam_stat_ae_initial_window_xstart = 0
{0xC91E, 0x0000, REG_U16},		//cam_stat_ae_initial_window_ystart = 0
{0xC920, 0x00FF, REG_U16},		//cam_stat_ae_initial_window_xend = 255
{0xC922, 0x00BF, REG_U16},		//cam_stat_ae_initial_window_yend = 191
{SENSOR_TABLE_END, 0x00}          
};     

static struct sensor_reg size_1280x720[] = {
//[1.1 720P: fixed to 30FPS]
//[MT9M114_1280x720_720p_MIPI_768_fixed_30fps_EXTCLK_24]
{0x098E, 0x1000, REG_U16},
{0xC800, 0x007C, REG_U16},		//cam_sensor_cfg_y_addr_start = 124
{0xC802, 0x0004, REG_U16},		//cam_sensor_cfg_x_addr_start = 4
{0xC804, 0x0353, REG_U16},		//cam_sensor_cfg_y_addr_end = 851
{0xC806, 0x050B, REG_U16},		//cam_sensor_cfg_x_addr_end = 1291
{0xC808, 0x02DC6C00, REG_U32},		//cam_sensor_cfg_pixclk = 48000000
{0xC80C, 0x0001, REG_U16},		//cam_sensor_cfg_row_speed = 1
{0xC80E, 0x00DB, REG_U16},		//cam_sensor_cfg_fine_integ_time_min = 219
{0xC810, 0x05BD, REG_U16},		//cam_sensor_cfg_fine_integ_time_max = 1469
{0xC812, 0x03E8, REG_U16},		//cam_sensor_cfg_frame_length_lines = 1000
{0xC814, 0x0640, REG_U16},		//cam_sensor_cfg_line_length_pck = 1600
{0xC816, 0x0060, REG_U16},		//cam_sensor_cfg_fine_correction = 96
{0xC818, 0x02D3, REG_U16},		//cam_sensor_cfg_cpipe_last_row = 723
{0xC826, 0x0020, REG_U16},		//cam_sensor_cfg_reg_0_data = 32
{0xC834, 0x0003, REG_U16},		//cam_sensor_control_read_mode = 0
{0xC854, 0x0000, REG_U16},		//cam_crop_window_xoffset = 0
{0xC856, 0x0000, REG_U16},		//cam_crop_window_yoffset = 0
{0xC858, 0x0500, REG_U16},		//cam_crop_window_width = 1280
{0xC85A, 0x02D0, REG_U16},		//cam_crop_window_height = 720
{0xC85C, 0x03,	 REG_U8},		//cam_crop_cropmode = 3
{0xC868, 0x0500, REG_U16},		//cam_output_width = 1280
{0xC86A, 0x02D0, REG_U16},		//cam_output_height = 720
{0xC878, 0x00,	 REG_U8},		//cam_aet_aemode = 0
{0xC88C, 0x1E00, REG_U16},		//cam_aet_max_frame_rate = 7680
{0xC88E, 0x1E00, REG_U16},		//cam_aet_min_frame_rate = 7680
{0xC914, 0x0000, REG_U16},		//cam_stat_awb_clip_window_xstart = 0
{0xC916, 0x0000, REG_U16},		//cam_stat_awb_clip_window_ystart = 0
{0xC918, 0x04FF, REG_U16},		//cam_stat_awb_clip_window_xend = 1279
{0xC91A, 0x02CF, REG_U16},		//cam_stat_awb_clip_window_yend = 719
{0xC91C, 0x0000, REG_U16},		//cam_stat_ae_initial_window_xstart = 0
{0xC91E, 0x0000, REG_U16},		//cam_stat_ae_initial_window_ystart = 0
{0xC920, 0x00FF, REG_U16},		//cam_stat_ae_initial_window_xend = 255
{0xC922, 0x008F, REG_U16},		//cam_stat_ae_initial_window_yend = 143
{SENSOR_TABLE_END, 0x00}          
};     


static struct sensor_reg size_720x576[] = {
//[MT9M114_720x576_MIPI_768_fixed_30fps_EXTCLK_24]
{0x098E, 0x1000, REG_U16},
{0xC800, 0x0004, REG_U16},		//cam_sensor_cfg_y_addr_start = 4
{0xC802, 0x0004, REG_U16},		//cam_sensor_cfg_x_addr_start = 4
{0xC804, 0x03CB, REG_U16},		//cam_sensor_cfg_y_addr_end = 971
{0xC806, 0x050B, REG_U16},		//cam_sensor_cfg_x_addr_end = 1291
{0xC808, 0x02DC6C00, REG_U32},		//cam_sensor_cfg_pixclk = 48000000
{0xC80C, 0x0001, REG_U16},		//cam_sensor_cfg_row_speed = 1
{0xC80E, 0x00DB, REG_U16},		//cam_sensor_cfg_fine_integ_time_min = 219
{0xC810, 0x05B3, REG_U16},		//cam_sensor_cfg_fine_integ_time_max = 1459
{0xC812, 0x03EE, REG_U16},		//cam_sensor_cfg_frame_length_lines = 1006
{0xC814, 0x0636, REG_U16},		//cam_sensor_cfg_line_length_pck = 1590
{0xC816, 0x0060, REG_U16},		//cam_sensor_cfg_fine_correction = 96
{0xC818, 0x03C3, REG_U16},		//cam_sensor_cfg_cpipe_last_row = 963
{0xC826, 0x0020, REG_U16},		//cam_sensor_cfg_reg_0_data = 32
{0xC834, 0x0003, REG_U16},		//cam_sensor_control_read_mode = 0
{0xC854, 0x0000, REG_U16},		//cam_crop_window_xoffset = 0
{0xC856, 0x0000, REG_U16},		//cam_crop_window_yoffset = 0
{0xC858, 0x0500, REG_U16},		//cam_crop_window_width = 1280
{0xC85A, 0x03C0, REG_U16},		//cam_crop_window_height = 960
{0xC85C, 0x03,	 REG_U8},		//cam_crop_cropmode = 3
{0xC868, 0x02D0, REG_U16},		//cam_output_width = 720
{0xC86A, 0x0240, REG_U16},		//cam_output_height = 576
{0xC878, 0x00,	 REG_U8},		//cam_aet_aemode = 0
{0xC88C, 0x1E02, REG_U16},		//cam_aet_max_frame_rate = 7682
{0xC88E, 0x1E02, REG_U16},		//cam_aet_min_frame_rate = 7682
{0xC914, 0x0000, REG_U16},		//cam_stat_awb_clip_window_xstart = 0
{0xC916, 0x0000, REG_U16},		//cam_stat_awb_clip_window_ystart = 0
{0xC918, 0x02CF, REG_U16},		//cam_stat_awb_clip_window_xend = 719
{0xC91A, 0x023F, REG_U16},		//cam_stat_awb_clip_window_yend = 575
{0xC91C, 0x0000, REG_U16},		//cam_stat_ae_initial_window_xstart = 0
{0xC91E, 0x0000, REG_U16},		//cam_stat_ae_initial_window_ystart = 0
{0xC920, 0x00FF, REG_U16},		//cam_stat_ae_initial_window_xend = 255
{0xC922, 0x00BF, REG_U16},		//cam_stat_ae_initial_window_yend = 1
{SENSOR_TABLE_END, 0x00}          
};    

//---------------------------------------------------------------------
// Change-Config - re-configures device state using CAM configuration variables
//---------------------------------------------------------------------
static struct sensor_reg Change_Config[] = {
{0x098E, 0xDC00, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS [SYSMGR_NEXT_STATE]
{0xDC00, 0x28,	 REG_U8}, 	// SYSMGR_NEXT_STATE
{0x0080, 0x8002, REG_U16},
{POLL_COMMAND_REGISTER, HOST_COMMAND_1, 0},
//{SENSOR_WAIT_MS, 100, REG_U16},	
{SENSOR_TABLE_END, 0x0000, REG_U16}
};

////---------------------------------------------------------------------
//// Refresh - refreshes device state using CAM configuration variables
////---------------------------------------------------------------------
//static struct sensor_reg Refresh[] = {
//{0x0080, 0x8004, REG_U16},
//{POLL_COMMAND_REGISTER, HOST_COMMAND_2, 0},
////{SENSOR_WAIT_MS, 100, REG_U16},	
//{SENSOR_TABLE_END, 0x0000, REG_U16}
//};
////
////-------------------------------------------------------------
//// Wait For 2 Start-of-frame events
////-------------------------------------------------------------
//static struct sensor_reg Wait_2_SOF_Events[] = {
//{0xFC00, 0x0002, REG_U16},
//{0xFC02, 0x0002, REG_U16},
//{0x0080, 0x8008, REG_U16},
//{POLL_COMMAND_REGISTER, HOST_COMMAND_3, 0},
////{SENSOR_WAIT_MS, 100, REG_U16},	
//{SENSOR_TABLE_END, 0x0000, REG_U16}
//};
//
///* Effect Settings */
static struct sensor_reg ColorEffect_None[] = {

{SENSOR_TABLE_END, 0x0000, REG_U16}
};

static struct sensor_reg ColorEffect_Mono[] = {

{SENSOR_TABLE_END, 0x0000, REG_U16}
};

static struct sensor_reg ColorEffect_Sepia[] = {

{SENSOR_TABLE_END, 0x0000, REG_U16}
};

static struct sensor_reg ColorEffect_Negative[] = {

{SENSOR_TABLE_END, 0x0000, REG_U16}
};

static struct sensor_reg ColorEffect_Solarize[] = {

{SENSOR_TABLE_END, 0x0000, REG_U16}
};

//Sensor ISP Not Support this function
static struct sensor_reg ColorEffect_Posterize[] = {
{SENSOR_TABLE_END, 0x0000, REG_U16}
};

/* White Balance settings */
//[2. AWB/MWB APIs]
//[2.1 AWB -- default]
static struct sensor_reg Whitebalance_Auto[] = {
{0x098E, 0x0000, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS
{0xC909, 0x02,	 REG_U8}, 	// CAM_AWB_AWBMODE
{SENSOR_TABLE_END, 0x00}          
};

//[2.2 MWB: D65]
static struct sensor_reg Whitebalance_Daylight[] = {	//&*&*&*CJ_20120521: mod for Daylight mode
{0x098E, 0x0000, REG_U16},// LOGICAL_ADDRESS_ACCESS
{0xC909, 0x00,	 REG_U8}, // CAM_AWB_AWBMODE
{0xC8F0, 0x1964, REG_U16},// CAM_AWB_COLOR_TEMPERATURE
{SENSOR_TABLE_END, 0x00}          
};

//[2.3 MWB: CWF]
static struct sensor_reg Whitebalance_Fluorescent[] = {
{0x098E, 0x0000, REG_U16},// LOGICAL_ADDRESS_ACCESS
{0xC909, 0x00,	 REG_U8}, // CAM_AWB_AWBMODE
{0xC8F0, 0x10D6, REG_U16},// CAM_AWB_COLOR_TEMPERATURE
{SENSOR_TABLE_END, 0x00}          
};

//[2.4 MWB: TL84]
static struct sensor_reg wb_cloudy[] = {
{0x098E, 0x0000, REG_U16},// LOGICAL_ADDRESS_ACCESS
{0xC909, 0x00,	 REG_U8}, // CAM_AWB_AWBMODE
{0xC8F0, 0x0E74, REG_U16},// CAM_AWB_COLOR_TEMPERATURE
{SENSOR_TABLE_END, 0x00}          
};

//[2.5 MWB: A Light]
static struct sensor_reg Whitebalance_Incandescent[] = {	//&*&*&*CJ_20120521: mod for Incandescent mode
{0x098E, 0x0000, REG_U16},// LOGICAL_ADDRESS_ACCESS
{0xC909, 0x00,	 REG_U8}, // CAM_AWB_AWBMODE
{0xC8F0, 0x0A8C, REG_U16},// CAM_AWB_COLOR_TEMPERATURE
{SENSOR_TABLE_END, 0x00}          
};

// Modified EV Control APIs
//[3. EV adjustment APIs] 
//[3.1 EV-2: 115]
static struct sensor_reg Exposure_Negative_2[] = {
{0x098E, 0x4C0A	, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS [UVC_BRIGHTNESS_CONTROL]
{0xCC0A, 0x0020	, REG_U16}, 	// UVC_BRIGHTNESS_CONTROL	//&*&*&*CJ_20120521: mod for Exposure_Negative_2
{SENSOR_TABLE_END, 0x0000, REG_U16}
};

//[3.2 EV-1: 125]
static struct sensor_reg Exposure_Negative_1[] = {
{0x098E, 0x4C0A	, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS [UVC_BRIGHTNESS_CONTROL]
{0xCC0A, 0x002F	, REG_U16}, 	// UVC_BRIGHTNESS_CONTROL //&*&*&*CJ_20120521: mod for Exposure_Negative_1
{SENSOR_TABLE_END, 0x0000, REG_U16}
};

//[3.3 EV0: 135 -- default]
static struct sensor_reg Exposure_0[] = {
{0x098E, 0x4C0A	, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS [UVC_BRIGHTNESS_CONTROL]
{0xCC0A, 0x003C	, REG_U16}, 	// UVC_BRIGHTNESS_CONTROL //&*&*&*CJ_20120521: mod for Exposure_0
{SENSOR_TABLE_END, 0x0000, REG_U16}
};

//[3.4 EV+1: 145]
static struct sensor_reg Exposure_1[] = {
{0x098E, 0x4C0A	, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS [UVC_BRIGHTNESS_CONTROL]
{0xCC0A, 0x0052	, REG_U16}, 	// UVC_BRIGHTNESS_CONTROL //&*&*&*CJ_20120521: mod for Exposure_1
{SENSOR_TABLE_END, 0x0000, REG_U16}
};

//[3.5 EV+2: 155]
static struct sensor_reg Exposure_2[] = {
{0x098E, 0x4C0A	, REG_U16}, 	// LOGICAL_ADDRESS_ACCESS [UVC_BRIGHTNESS_CONTROL]
{0xCC0A, 0x006B	, REG_U16}, 	// UVC_BRIGHTNESS_CONTROL //&*&*&*CJ_20120521: mod for Exposure_2
{SENSOR_TABLE_END, 0x0000, REG_U16}
};


//&*&*&*CJ1_20120521: mod for mt9m114 scene mode
//scene mode
//scene_nightoff
static struct sensor_reg scene_nightoff[] = {
//Modify ISO value.	
//[8.1 ISO Speed 125]  // min 1xgain for SOC1040
//[8.4 ISO Speed 800] 
{0x098E, 0x2804	, REG_U16},
{0xA804, 0x00ff	, REG_U16},
{0x305E, 0x1020	, REG_U16},
{SENSOR_TABLE_END, 0x0000, REG_U16}
};

//scene_landscape normal
static struct sensor_reg scene_landscape_normal[] = {
//Modify Saturation and Sharpness value.		
//[3.3 EV0: 135 -- default]
//{0x098E, 0x4C0A	, REG_U16},
//{0xCC0A, 0x003C	, REG_U16},
//[4.3 Saturation 0: default]
//[4.1 Saturation +2]"
{0x098E, 0x4C12	, REG_U16},
//{0xCC12, 0x0080	, REG_U16},
{0xCC12, 0x0070	, REG_U16},
//[5.3 Sharpness 0: default]
//[5.2 Sharpness +1]"
{0x098E, 0x4C14	, REG_U16},
{0xCC14, 0x0000	, REG_U16},
{SENSOR_TABLE_END, 0x0000, REG_U16}
};

//scene_portrait normal
static struct sensor_reg scene_portrait_normal[] = {
//Modify Sharpness value.		
//[3.3 EV0: 135 -- default]
//{0x098E, 0x4C0A	, REG_U16},
//{0xCC0A, 0x003C	, REG_U16},
//[4.3 Saturation 0: default]
{0x098E, 0x4C12	, REG_U16},
//{0xCC12, 0x0080	, REG_U16},
{0xCC12, 0x0070	, REG_U16},
//[5.3 Sharpness 0: default]
//[5.1 Sharpness +2]"
{0x098E, 0x4C14	, REG_U16},
{0xCC14, 0x0000	, REG_U16},	
{SENSOR_TABLE_END, 0x0000, REG_U16}
};

//scene_sunset normal
static struct sensor_reg scene_sunset_normal[] = {
//	1. Enable/Disable MWB.		
//	2.Modify Color Temperature
//[2.1 AWB -- default]
//([2.3 MWB: CWF]+[2.4 MWB: TL84])/2"
{0x098E, 0x0000	, REG_U16},
{0xC909, 0x02,	 REG_U8},	
{SENSOR_TABLE_END, 0x0000, REG_U16}
};

//sport_off
static struct sensor_reg sport_off[] = {
//	Modify ISO value.		
//[8.1 ISO Speed 125]  // min 1xgain for SOC1040
//[8.2 ISO Speed 200]"
{0x098E, 0x2804	, REG_U16},
{0xA804, 0x00ff	, REG_U16},
{0x305E, 0x1020	, REG_U16},		
{SENSOR_TABLE_END, 0x0000, REG_U16}
};

////scene_normal
//static struct sensor_reg scene_normal[] = {
//	
//{SENSOR_TABLE_END, 0x0000, REG_U16}
//};

//sport
static struct sensor_reg sport[] = {
//	Modify ISO value.		
//[8.1 ISO Speed 125]  // min 1xgain for SOC1040
//[8.2 ISO Speed 200]"
{0x098E, 0x2804	, REG_U16},
{0xA804, 0x00ff	, REG_U16},
{0x305E, 0x1033	, REG_U16},	
{SENSOR_TABLE_END, 0x0000, REG_U16}
};

//scene_portrait
static struct sensor_reg scene_portrait[] = {
//Modify Sharpness value.		
//[3.3 EV0: 135 -- default]
//{0x098E, 0x4C0A	, REG_U16},
//{0xCC0A, 0x003C	, REG_U16},
//[4.3 Saturation 0: default]
{0x098E, 0x4C12	, REG_U16},
{0xCC12, 0x0080	, REG_U16},
//[5.3 Sharpness 0: default]
//[5.1 Sharpness +2]"
{0x098E, 0x4C14	, REG_U16},
{0xCC14, 0x0002	, REG_U16},	
{SENSOR_TABLE_END, 0x0000, REG_U16}
};

//scene_landscape
static struct sensor_reg scene_landscape[] = {
//Modify Saturation and Sharpness value.		
//[3.3 EV0: 135 -- default]
//{0x098E, 0x4C0A	, REG_U16},
//{0xCC0A, 0x003C	, REG_U16},
//[4.3 Saturation 0: default]
//[4.1 Saturation +2]"
{0x098E, 0x4C12	, REG_U16},
{0xCC12, 0x008A	, REG_U16},
//[5.3 Sharpness 0: default]
//[5.2 Sharpness +1]"
{0x098E, 0x4C14	, REG_U16},
{0xCC14, 0x0001	, REG_U16},
{SENSOR_TABLE_END, 0x0000, REG_U16}
};

//scene_sunset
static struct sensor_reg scene_sunset[] = {
//	1. Enable/Disable MWB.		
//	2.Modify Color Temperature
//[2.1 AWB -- default]
//([2.3 MWB: CWF]+[2.4 MWB: TL84])/2"
{0x098E, 0x0000	, REG_U16},
{0xC909, 0x00,	 REG_U8},	
{0xC8F0, 0x0FA5	, REG_U16},	
{SENSOR_TABLE_END, 0x0000, REG_U16}
};

//scene_night
static struct sensor_reg scene_night[] = {
//Modify ISO value.	
//[8.1 ISO Speed 125]  // min 1xgain for SOC1040
//[8.4 ISO Speed 800] 
{0x098E, 0x2804	, REG_U16},
{0xA804, 0x0000	, REG_U16},
{0x305E, 0x10B2	, REG_U16},
{SENSOR_TABLE_END, 0x0000, REG_U16}
};
//&*&*&*CJ1_20120521: mod for mt9m114 scene mode


#endif /* ifndef MT9M114_REGS_H */
